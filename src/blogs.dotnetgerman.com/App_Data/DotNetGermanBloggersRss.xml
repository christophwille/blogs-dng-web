<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>DotNetGerman Bloggers</title>
    <description>Alle Blogs von DotNetGerman.com</description>
    <copyright>Copyright 2004-2007 DotNetGerman.com</copyright>
    <generator>DotNetGerman.com</generator>
    <a10:link href="http://blogs.dotnetgerman.com/" />
    <item>
      <guid isPermaLink="false">http://blog.alexonasp.net/post.aspx?id=add75e15-af15-4631-ae5c-71ad42bae49d</guid>
      <link>http://blog.alexonasp.net/post/2011/01/11/Javascript-brace-matching-in-Visual-Studio-2010.aspx</link>
      <a10:author>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:author>
      <title>Javascript brace matching in Visual Studio 2010</title>
      <description>&lt;p&gt;jQuery ist toll. Visual Studio 2010 ist toll. Noch toller ist brace matching für Javascript (und somit jQuery) in Visual Studio 2010 – leider nicht out of the box.&lt;/p&gt;  &lt;p&gt;Aber dank &lt;a href="http://visualstudiogallery.msdn.microsoft.com/en-us/0696ad60-1c68-4b2a-9646-4b5f4f8f2e06" mce_href="http://visualstudiogallery.msdn.microsoft.com/en-us/0696ad60-1c68-4b2a-9646-4b5f4f8f2e06"&gt;dieser Erweiterung&lt;/a&gt; kein Problem:&lt;/p&gt;  &lt;p&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Visual Studio 2010 Javascript Brace Matching" border="0" alt="Visual Studio 2010 Javascript Brace Matching" src="http://blog.alexonasp.net/image.axd?picture=Windows-Live-Writer/Javascript-brace-matching-in-Visual-Stud/4364897D/VS2010JavascriptBraceMatching.png" width="360" height="152" mce_src="http://blog.alexonasp.net/image.axd?picture=Windows-Live-Writer/Javascript-brace-matching-in-Visual-Stud/4364897D/VS2010JavascriptBraceMatching.png" /&gt;&lt;/p&gt;&lt;div class="wlWriterHeaderFooter" style="text-align:left; margin:0px; padding:4px 4px 4px 4px;"&gt;&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.alexonasp.net/post/2011/01/11/Javascript-brace-matching-in-Visual-Studio-2010.aspx"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://blog.alexonasp.net/post/2011/01/11/Javascript-brace-matching-in-Visual-Studio-2010.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" alt="DotNetKicks-DE Image" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;</description>
      <pubDate>Tue, 11 Jan 2011 18:58:00 +0100</pubDate>
      <a10:rights type="text">Alexander Zeitler</a10:rights>
      <a10:contributor>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Zeitler</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.ppedv.de/post.aspx?id=fbd4b465-de5e-4065-9f49-533781f21f98</guid>
      <link>http://blog.ppedv.de/post/2011/01/11/MVVM-ICommand-mit-Silverlight-mal-wirklich-ganz-einfach.aspx</link>
      <a10:author>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:author>
      <title>MVVM ICommand mit Silverlight -mal wirklich ganz einfach</title>
      <description>&lt;p&gt;Wenn man heute jemand sein will, muss ein Silverlight Projekt mindestens MVVM drin haben und besonders cool soll ja PRISM oder Unity sein. Als erklärter Pragmatiker, muss ich mir zuerst einmal immer&amp;#160; mindestens 30 minütige Ausführungen über mich ergehen lassen, warum das MVxx Ding so wichtig ist. Da fallen Argumente wie Testbarkeit (ich hasse Wörter die mit keit enden), Trennung von UI und Logik, sauberer Code und überhaupt Weltfrieden. In den nächsten 30 Minuten versucht dann mein Gegenüber mich von der Notwendigkeit seines Lieblings MVVM Frameworks zu überzeugen. Weil mit MVVM wird zwar alles einfacher wird, aber man braucht viel mehr Code dafür und eine Design Ansicht haben sowieso nur Luschen. In der Gesamtheit betrachtet eine Lösung für ein Problem, das ich nicht habe. Warum soll es so schrecklich sein 10 Zeilen Code in einer ASPX Seite oder Silverlight Code behind Datei zu haben?&lt;/p&gt;  &lt;p&gt;Gar nichts. Wer das so machen möchte kann meist sehr sauberen Code schreiben den andere auch pflegen können. PUNKT.&lt;/p&gt;  &lt;p&gt;Trotzdem muss jeder Entwickler mit ein wenig Erfahrung seine Optionen kennen. Und da ist der7das MVVM (Model View ViewModel) Design Pattern eben dabei. Ich will mich auch nicht auf Entwurfsmuster versteifen, nur so viel. Auch Patterns regeln das Leben des Entwicklers nicht. Es ist vielmehr eine gemeinsame Kurzsprache die vieles offen lässt.&lt;/p&gt;  &lt;p&gt;Mein aktuelles Silverlight Beispiel ist deswegen auf das absolut notwendigste reduziert. Selbst das Model entfällt (also nur VVM). Üblicherweise gehts im Model um Daten. Brauchen wir für die Basics nicht. Wir werden ein UI schreiben, das keinen Code enthält und eine Klasse (das Viewmodel) die die Jobs erledigt. Die UI hat einen Textbox und einen Button. Bei Click auf den Button wird der Inhalt der Textbox per Messagebox angezeigt.&lt;/p&gt;  &lt;p&gt;Meine Klasse wird eine Eigenschaft bekommen und einen Button, der eine Methode aufruft. Die Property die später dem Button zugeordnet wird, muss seit Silverlight 4 das Interface ICommand beinhalten. Das ist eben so. Andere MVxxx Frameworks lösen das durchaus anders.&lt;/p&gt;  &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Class&lt;/span&gt; page60viewmodel
       &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt; Button1() &lt;span class="kwrd"&gt;As&lt;/span&gt; ICommand&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Nun beginnt der eigentliche Trick. In XAML kann man sehr leicht Objekte deklarativ instanzieren. Dies ist auch ein Superfeature, das ich gerne und dauernd benutze.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;xmlns:local=&amp;quot;clr-namespace:KursSL&amp;quot;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;UserControl.DataContext&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;local:page60viewmodel&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;UserControl.DataContext&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Das ist nur eine mögliche Deklaration. Man sieht auch öfter das man das in einem Resources Element mit einem Key erledigt und dann das DataContext Attribut zuweist. Es spielt auch keine Rolle auf welcher Hierarchie Ebene man das tut. Üblicherweise ganz oben per Layoutroot oder wie hier gleich im Usercontrol. Und jetzt kann man sehr lässig per Command Attribut an die Eigenschaft Button1 binden.&lt;/p&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;Button Content=&amp;quot;Button&amp;quot; 
                Command=&amp;quot;{Binding Button1}&amp;quot;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Das entspricht klassischem Databinding in WPF und Silverlight. &lt;/p&gt;

&lt;p&gt;Jetzt stellt sich die berechtigte Frage: wo schreibe ich den Code hin, der ausgeführt werden soll? Dazu geht's wieder ab in die Klasse (Viewmodel). Im Konstruktor wird das Event registriert, mit dem Delegate Event. In anderen Frameworks kommen andere Methoden als ActionCommand zur Anwendung. Bei Verwendung von PRISM (eine optionale Bibliothek für WPF und SL) muss ein DelegateCommand erzeugt werden.&lt;/p&gt;

&lt;pre class="csharpcode"&gt; &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt;()
        &lt;span class="kwrd"&gt;Me&lt;/span&gt;.Button1 = &lt;span class="kwrd"&gt;New&lt;/span&gt; ActionCommand(&lt;span class="kwrd"&gt;AddressOf&lt;/span&gt; pressButton1)
 &lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Also schreiben wir ein ganz wenig Code für den eigentlichen Button Click Event.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; pressButton1(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; obj &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;)
        MessageBox.Show(&lt;span class="str"&gt;&amp;quot;presses&amp;quot;&lt;/span&gt; + ????)
&lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Damit ist das implementieren eines Commands auch fertig. Ein wichtiger Teil fehlt noch. Wie kommen die UI Daten an die Stelle der drei Fragezeichen. Dafür bekommt die Klasse eben noch eine Eigenschaft. Die Eigenschaft wird dann wieder mit der Binding Syntax im UI an die Eigenschaft der Textbox gebunden. Auch das hat nichts mit Entwurfsmustern zu tun. Das ist seit den Anfängen von WPF so.&lt;/p&gt;

&lt;p&gt;Hier also die komplette Seite in XAML&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;UserControl&lt;/span&gt; &lt;span class="attr"&gt;x:Class&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;KursSL.page60&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;xmlns&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;xmlns:x&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;xmlns:d&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;xmlns:mc&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;mc:Ignorable&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;d&amp;quot;&lt;/span&gt;
    &lt;span class="attr"&gt;d:DesignHeight&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;300&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;d:DesignWidth&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;400&amp;quot;&lt;/span&gt;
             &lt;span class="attr"&gt;xmlns:local&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;clr-namespace:KursSL&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;UserControl.DataContext&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;local:page60viewmodel&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;UserControl.DataContext&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Background&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;White&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Button&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;35&amp;quot;&lt;/span&gt;
 &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;114,82,0,0&amp;quot;&lt;/span&gt; 
                &lt;span class="attr"&gt;Command&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Button1}&amp;quot;&lt;/span&gt;
                &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;136&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBox&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;42&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;38,24,0,0&amp;quot;&lt;/span&gt; 
&lt;font style="background-color: #ffff00"&gt;&lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding Wert,Mode=TwoWay}&amp;quot;&lt;/span&gt;&lt;/font&gt; 
&lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;212&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;UserControl&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;Nicht schön aber tut. Ist doch einfach oder? ( Bei nein, nochmal von vorne zu lesen beginnen)&lt;/p&gt;

&lt;p&gt;Wieder zurück in der Klasse. Um zwischen der Eigenschaft und der Textbox eine richtig dicke Verbding herzustellen wird Silverlight typisch das Interface INotifyPropertyChanged implementiert. Wäre in diesem Beispiel nicht wirklich nötig, betrachte ich aber als essentiell. Dadurch wird ein Event System etabliert, das bei einer Änderung der Daten allen gebunden Controls mitteilt, das sie die Anzeige aktualisieren sollen. Das ist in asynchronen Szenarien, in denen Silverlight läuft unbedingt nötig. Ein Datagrid das an eine Liste gebunden wird, zeigt die Daten erst an, wenn ein Web Service geantwortet hat. Und mit diesem Binding Mechanismus muss sich der Entwickler nicht ums Timing kümmern. Wenn sich also der Wert ändert, teilt der Setter dem EventSystem mit, welchen Namen (Achtung Case Sensitive Zeichenkette) diese Variable hat. Hier nun das komplette Beispiel.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Imports&lt;/span&gt; Microsoft.Expression.Interactivity.Core
&lt;span class="kwrd"&gt;Imports&lt;/span&gt; System.ComponentModel
&lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Class&lt;/span&gt; page60viewmodel
    &lt;font style="background-color: #ffff00"&gt;&lt;span class="kwrd"&gt;Implements&lt;/span&gt; INotifyPropertyChanged&lt;/font&gt;
    &lt;font style="background-color: #ffff00"&gt;&lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Event&lt;/span&gt; PropertyChanged(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;br /&gt;&lt;/font&gt;&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; System.ComponentModel.PropertyChangedEventArgs) &lt;br /&gt;&lt;span class="kwrd"&gt;Implements&lt;/span&gt; System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt;()
        &lt;span class="kwrd"&gt;Me&lt;/span&gt;.Button1 = &lt;span class="kwrd"&gt;New&lt;/span&gt; ActionCommand(&lt;span class="kwrd"&gt;AddressOf&lt;/span&gt; pressButton1)
    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;
    &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt; Button1() &lt;span class="kwrd"&gt;As&lt;/span&gt; ICommand

    &lt;span class="kwrd"&gt;Private&lt;/span&gt; _Wert &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;
    &lt;span class="kwrd"&gt;Public&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt; Wert() &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;
        &lt;span class="kwrd"&gt;Get&lt;/span&gt;
            &lt;span class="kwrd"&gt;Return&lt;/span&gt; _Wert
        &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Get&lt;/span&gt;
        &lt;span class="kwrd"&gt;Set&lt;/span&gt;(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; value &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;String&lt;/span&gt;)
            _Wert = value
            &lt;font style="background-color: #ffff00"&gt;&lt;span class="kwrd"&gt;RaiseEvent&lt;/span&gt; PropertyChanged(&lt;span class="kwrd"&gt;Me&lt;/span&gt;, &lt;span class="kwrd"&gt;New&lt;/span&gt; PropertyChangedEventArgs(&lt;span class="str"&gt;&amp;quot;Wert&amp;quot;&lt;/span&gt;))&lt;/font&gt;
        &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Set&lt;/span&gt;
    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Property&lt;/span&gt;

    &lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; pressButton1(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; obj &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;)
        MessageBox.Show(&lt;span class="str"&gt;&amp;quot;presses&amp;quot;&lt;/span&gt; + Wert)
    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;
&lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Class&lt;/span&gt;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Nun kann man sich fragen ob das mit einem einfachen Dreizeiler nicht auch funktioniert. Natürlich. Das ist auch der Haupt Kritik Punkt an MVVM. Der Coding und Logik Aufwand können erheblich steigen. Um diesen Aufwand wieder zu reduzieren, gibt es eben Frameworks wie PRSIM oder MVVMlight.&lt;/p&gt;

&lt;p&gt;Meine persönliche Meinung dazu. Code im User Interface ist nicht per se zu verteufeln. Aber es ist Deine Entscheidung. Ich hoffe ich konnte ein wenig Licht ins dunkel bringen.&lt;/p&gt;

&lt;p&gt;Ergänzend: man kann Commands auch mit noch weniger Aufwand verwenden. Dazu gibt es einen Artikel hier im Blog.&lt;/p&gt;</description>
      <pubDate>Tue, 11 Jan 2011 18:38:17 +0100</pubDate>
      <a10:rights type="text">ppedv Team Blog</a10:rights>
      <a10:contributor>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ppedv Team Blog</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=b00c1530-64cf-4436-a674-f8720640620e</guid>
      <link>http://www.aboutdotnet.de/post/Wettbewerb-zum-Windows-Azure-DataMarket.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Wettbewerb zum Windows Azure DataMarket</title>
      <description>&lt;img src='/image.axd?picture=2011%5c1%5ccodeprojectazuredatasetcontest_0068x0054.jpg' alt='Wettbewerb zum Windows Azure DataMarket' title='Wettbewerb zum Windows Azure DataMarket' align='left' hspace='15'&gt;Einen Wettbewerb für Windows Azure-Entwickler hat die Developer-Community »The Code Project« ausgeschrieben. Gesucht werden innovative Cloud-Anwendungen für die Windows Azure-Plattform, wobei Datendienste aus dem Windows Azure DataMarket verwendet werden sollen.</description>
      <pubDate>Tue, 11 Jan 2011 16:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-5601714198208780275.post-4906625954259731881</guid>
      <link>http://feedproxy.google.com/~r/blogspot/jcselke/~3/oJfma2n49Uo/den-standard-editierdialog-des.html</link>
      <a10:author>
        <a10:name>Jan Christian Selke</a10:name>
      </a10:author>
      <title>Den Standard Editierdialog des Sharepoint Servers nutzen</title>
      <description>Wer den Sharepoint Editierdialog anzupassen möchte hat Glück, denn dazu gibt es im Internet reichlich Quellen.&lt;br /&gt;
Schon etwas anders sieht es allerdings aus, möchte man den 0815-Standarddialog zur Bearbeitung von Listitems benutzen; allerdings den Popup Dialog - nicht den seitenfüllenden. Denn dazu gibt es schon nicht mehr so viel Informationen. Der Fall ist vermutlich so banal, dass er schon wieder exotisch ist...&lt;br /&gt;
Dennoch wollte ich vor Kurzem genau das!&lt;br /&gt;
&lt;br /&gt;
Nach einigem Suchen fand ich dann doch schließlich etwas: &lt;a href="http://jomit.blogspot.com/2009/12/dialog-platform-in-sharepoint-2010-how.html"&gt;Jomit'sBlog&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
Hier wird beschrieben, was die neue Dialog Plattform ist und wie sie genutzt werden kann am - kurzer Trommelwirbel - Beispiel des Standard Editierdialogs.&lt;br /&gt;
Wenn man doch immer so einfach glücklich gemacht werden könnte ;-)&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5601714198208780275-4906625954259731881?l=jcselke.blogspot.com' alt='' /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/blogspot/jcselke?a=oJfma2n49Uo:yWf6zZ5Tqxw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/blogspot/jcselke?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/blogspot/jcselke?a=oJfma2n49Uo:yWf6zZ5Tqxw:xZ3Pn_mapoI"&gt;&lt;img src="http://feeds.feedburner.com/~ff/blogspot/jcselke?d=xZ3Pn_mapoI" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/jcselke/~4/oJfma2n49Uo" height="1" width="1"/&gt;</description>
      <pubDate>Tue, 11 Jan 2011 15:57:00 Z</pubDate>
      <a10:updated>2011-01-11T07:57:00-08:00</a10:updated>
      <a10:rights type="text">Jan Christian Selke</a10:rights>
      <a10:contributor>
        <a10:name>Jan Christian Selke</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Christian Selke</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://condeso.wordpress.com/?p=53</guid>
      <link>http://condeso.wordpress.com/2011/01/11/testen-und-updaten-von-timerjobs/</link>
      <a10:author>
        <a10:name>Dominik Heine</a10:name>
      </a10:author>
      <title>Testen und Updaten von TimerJobs</title>
      <description>Wenn man einen TimerJob im Sharepoint 2007 erstellt, kommt es irgendwann dazu, dass dieser getestet werden muss, häufig ist es dann auch notwendig Anpassungen am TimerJob durchzuführen. In diesem Zusammenhang soll erläutert werden, welche Schritte notwendig sind, um einen TimerJob &amp;#8230; &lt;a href="http://condeso.wordpress.com/2011/01/11/testen-und-updaten-von-timerjobs/"&gt;Weiterlesen &lt;span class="meta-nav"&gt;&amp;#8594;&lt;/span&gt;&lt;/a&gt;&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=53&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</description>
      <pubDate>Tue, 11 Jan 2011 15:33:12 Z</pubDate>
      <a10:rights type="text">Dominik Heine</a10:rights>
      <a10:content type="html">&lt;p&gt;Wenn man einen TimerJob im Sharepoint 2007 erstellt, kommt es irgendwann dazu, dass dieser getestet werden muss, häufig ist es dann auch notwendig Anpassungen am TimerJob durchzuführen.&lt;/p&gt;
&lt;p&gt;In diesem Zusammenhang soll erläutert werden, welche Schritte notwendig sind, um einen TimerJob zu Debuggen und was man beachten muss, wenn man Änderungen am TimerJob in Sharepoint übertragen möchte.&lt;/p&gt;
&lt;p&gt;Nachdem die eigene Solution im Sharepoint deployed wurde und das Feature, welches für den TimerJob verantwortlich ist aktiviert wurde, sollte der TimerJob zum jeweils angegebenen Intervall durchlaufen. Möchte man nun diesen TimerJob debuggen, so sollte man in seinem Visual Studio Projekt auf jeden Fall ein Rebuild durchgeführt haben, außerdem muss man unbedingt ein Copy To GAC ausführen. Nach diesen beiden Schritten empfiehlt sich ein Page Reload. Anschließend muss man sich auf den TimerJob schalten.&lt;/p&gt;
&lt;p&gt;Dies geschieht folgendermaßen: Im Visual Studio unter dem Menu Punkt &lt;strong&gt;Debug-&amp;gt; Attach to Process&lt;/strong&gt; bekommt man folgendes Fenster.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://condeso.files.wordpress.com/2011/01/attach.png"&gt;&lt;img class="aligncenter size-medium wp-image-54" title="Attach to Process Dialog" src="http://condeso.files.wordpress.com/2011/01/attach.png?w=300&amp;#038;h=202" alt="" width="300" height="202" /&gt;&lt;/a&gt;In diesem Fenster ist es wichtig, dass die beiden Check-Boxes unterhalb des Auswahlfeldes selektiert sind. Der Prozess auf den man sich schalten muss heißt &lt;strong&gt;OWSTIMER.EXE&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Läuft der TimerJob im Sharepoint jetzt an und hat man entsprechende Haltepunkte in der Execute Methode des TimerJobs gesetzt, so springt der Debuggmodus des Visual Studios an und man kann das Verhalten des TimerJobs genauer betrachten.&lt;/p&gt;
&lt;p&gt;Möchte man nun Änderungen am TimerJob durchführen, da man beim Debuggen möglicherweise Probleme entdeckt hat, so muss man nachdem man alle Änderungen durchgeführt hat zunächst wieder ein Rebuild anstoßen. Anschließend ist es ebenfalls wieder notwendig ein Copy to GAC auszuführen.&lt;/p&gt;
&lt;p&gt;Hat man dies gemacht würde man meinen, dass der TimerJob nun das neue Verhalten entsprechend der Änderungen ausführt. Dies ist aber nicht der Fall, denn der TimerJob cached seine Ablaufroutine, d.h. der in der Execute Methode angegebene Code ist immer noch der selbe, wie vor dem Rebuild und Copy to GAC. Daher ist es notwendig den TimerJob zu beenden und neuzustarten. Dies geschieht über die Console mit den Befehlen.&lt;/p&gt;
&lt;pre&gt;net stop SPTimerV3
net start SPTimerV3&lt;/pre&gt;
&lt;p&gt;Sollte man Anpassungen machen am FeatureReceiver, welcher auch den Schedule für den TimerJob setzt so muss man beachten, dass es hier auch nicht genügt, ein Rebuild und ein Copy to GAC durchzuführen. Nachdem man das gemacht hat, muss man das Feature für die Aktivierung des TimerJobs deaktivieren und erneut aktivieren. Erst dann wird der neue Schedule für den TimerJob aktiv.&lt;/p&gt;
&lt;br /&gt;  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gofacebook/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gotwitter/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/condeso.wordpress.com/53/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/condeso.wordpress.com/53/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=53&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</a10:content>
      <a10:contributor>
        <a10:name>Dominik Heine</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dominik Heine</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=756dcb08-5533-4f04-862e-4159c4899842</guid>
      <link>http://www.aboutdotnet.de/post/Uebersicht-zu-VB-NET-Code-Beispielen.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Übersicht zu VB.NET-Code-Beispielen</title>
      <description>Eine Übersicht zu Code-Beispielen für VB.NET hat Microsofts Visual Basic-Team in seinem Blog zusammengestellt.</description>
      <pubDate>Tue, 11 Jan 2011 15:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.thomasbandt.de/39/2380/de/blog/elmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html</guid>
      <link>http://blog.thomasbandt.de/39/2380/de/blog/elmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html</link>
      <a10:author>
        <a10:name>Thomas Bandt</a10:name>
      </a10:author>
      <title>ELMAH mit ASP.NET MVC nutzen und Fehler loggen</title>
      <description>



    	

        
&lt;div id="0_Show_Content" class="BlogPostContainer"&gt;
	

    
    
    &lt;p&gt;&lt;a href="http://code.google.com/p/elmah/"&gt;ELMAH&lt;/a&gt;&amp;nbsp;steht für Error Logging Modules and Handlers und ist kurz gesagt ein Plugin für ASP.NET-Anwendungen, mit dem Fehler, sprich Exceptions, geloggt werden können. Das Schöne daran ist, dass es sich ohne große Zeremonie installieren und sofort nutzen lässt, gleichzeitig aber auch konfigurier- und erweiterbar bleibt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Die Features im Überblick:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Logging of nearly all unhandled exceptions.
    &lt;li&gt;A web page to remotely view the entire log of recoded exceptions.
    &lt;li&gt;A web page to remotely view the full details of any one logged exception.
    &lt;li&gt;In many cases, you can review the original &lt;a href="http://en.wikipedia.org/wiki/Yellow_Screen_of_Death#ASP.NET" rel="nofollow"&gt;yellow screen of death&lt;/a&gt; that ASP.NET generated for a given exception, even with &lt;tt&gt;customErrors&lt;/tt&gt; mode turned off.
    &lt;li&gt;An e-mail notification of each error at the time it occurs.
    &lt;li&gt;An RSS feed of the last 15 errors from the log. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Installation für ASP.NET MVC 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nachfolgend eine kurze Installationsanleitung, die im Prinzip aus Teilen besteht, die ich mir jetzt selbst zusammengesucht habe. Da ein elementarer und immer wieder verlinkter Blogpost inzwischen offline ist, nehme ich das hier vor allem mal als Dokumentation für mich selbst her ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Download der Binaries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Die Dateien finden sich auf der &lt;a href="http://code.google.com/p/elmah/wiki/Downloads?tm=2"&gt;Projektwebsite&lt;/a&gt;. Einfach runterladen und entpacken und die&amp;nbsp;Elmah.dll aus dem 3.5er-Build ins Projekt einbinden, üblicherweise über einen /Shared-Ordner o.ä.&lt;/p&gt;
&lt;strong&gt;
&lt;p&gt;2. Datenbank konfigurieren&lt;/p&gt;
&lt;/strong&gt;
&lt;p&gt;Im Ordner /db des Zips findet sich ein Script namens SQLServer.sql. Das einfach gegen eine beliebige Datenbank, in der die Fehler gespeichert werden sollen, ausführen. Die Fehlermeldung, die kommt, wenn man einen SQL Server älter als 2000 ;-) verwendet, kann man getrost ignorieren.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Referenz hinzufügen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es wird lediglich eine Referenz auf die&amp;nbsp;Elmah.dll benötigt - ein Fakt, der das Ganze für mich überhaupt so attraktiv macht.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Web.config konfigurieren&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Die Konfiguration für den IIS7 bzw. MVC 3 weicht von der im mitgelieferten Sample-Web ab, daher hier komplett:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="html"&gt;xml&lt;/span&gt; &lt;span class="attr"&gt;version&lt;/span&gt;&lt;span class="kwrd"&gt;="1.0"&lt;/span&gt; &lt;span class="attr"&gt;encoding&lt;/span&gt;&lt;span class="kwrd"&gt;="UTF-8"&lt;/span&gt;?&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;configSections&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;sectionGroup&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="elmah"&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;section&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="security"&lt;/span&gt; &lt;span class="attr"&gt;requirePermission&lt;/span&gt;&lt;span class="kwrd"&gt;="false"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.SecuritySectionHandler, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;section&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="errorLog"&lt;/span&gt; &lt;span class="attr"&gt;requirePermission&lt;/span&gt;&lt;span class="kwrd"&gt;="false"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorLogSectionHandler, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;section&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="errorMail"&lt;/span&gt; &lt;span class="attr"&gt;requirePermission&lt;/span&gt;&lt;span class="kwrd"&gt;="false"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorMailSectionHandler, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;section&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="errorFilter"&lt;/span&gt; &lt;span class="attr"&gt;requirePermission&lt;/span&gt;&lt;span class="kwrd"&gt;="false"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorFilterSectionHandler, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;sectionGroup&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;configSections&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;connectionStrings&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="elmah"&lt;/span&gt; &lt;span class="attr"&gt;connectionString&lt;/span&gt;&lt;span class="kwrd"&gt;="server=2008; database=Datenbankname; User ID=sa; password=Password"&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;    &lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;connectionStrings&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  14:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;system.webServer&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;handlers&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  16:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah"&lt;/span&gt; &lt;span class="attr"&gt;verb&lt;/span&gt;&lt;span class="kwrd"&gt;="POST,GET,HEAD"&lt;/span&gt; &lt;span class="attr"&gt;path&lt;/span&gt;&lt;span class="kwrd"&gt;="elmah.axd"&lt;/span&gt; &lt;span class="attr"&gt;preCondition&lt;/span&gt;&lt;span class="kwrd"&gt;="integratedMode"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorLogPageFactory, Elmah"&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;handlers&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  18:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;modules&lt;/span&gt; &lt;span class="attr"&gt;runAllManagedModulesForAllRequests&lt;/span&gt;&lt;span class="kwrd"&gt;="true"&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="ErrorMail"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorMailModule, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  20:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="ErrorLog"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorLogModule, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:  &lt;/span&gt;      &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;add&lt;/span&gt; &lt;span class="attr"&gt;name&lt;/span&gt;&lt;span class="kwrd"&gt;="ErrorFilter"&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.ErrorFilterModule, Elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  22:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;modules&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;system.webServer&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  24:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;elmah&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;security&lt;/span&gt; &lt;span class="attr"&gt;allowRemoteAccess&lt;/span&gt;&lt;span class="kwrd"&gt;="0"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  26:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;errorLog&lt;/span&gt; &lt;span class="attr"&gt;type&lt;/span&gt;&lt;span class="kwrd"&gt;="Elmah.SqlErrorLog, Elmah"&lt;/span&gt; &lt;span class="attr"&gt;connectionStringName&lt;/span&gt;&lt;span class="kwrd"&gt;="elmah"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:  &lt;/span&gt;  &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;elmah&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  28:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5. HandleError ...&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Da MVC eine eigene Fehlerbehandlung mitbringt und diese die Exceptions auch als erledigt markiert, muss ein eigener Filter her, der ELMAH integriert. Warum und wieso ist &lt;a href="http://stackoverflow.com/questions/766610/how-to-get-elmah-to-work-with-asp-net-mvc-handleerror-attribute/779961#779961"&gt;in diesem Post beschrieben&lt;/a&gt;.&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; HandleErrorWithElmahAttribute : HandleErrorAttribute&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnException(ExceptionContext context)&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.OnException(context);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;        var e = context.Exception;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (!context.ExceptionHandled   &lt;span class="rem"&gt;// if unhandled, will be logged anyhow&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;            || RaiseErrorSignal(e)      &lt;span class="rem"&gt;// prefer signaling, if possible&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;            || IsFiltered(context))     &lt;span class="rem"&gt;// filtered?&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  14:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:  &lt;/span&gt;        LogException(e);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  16:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  18:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:  &lt;/span&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; RaiseErrorSignal(Exception e)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  20:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:  &lt;/span&gt;        var context = HttpContext.Current;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  22:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (context == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:  &lt;/span&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  24:  &lt;/span&gt;        var signal = ErrorSignal.FromContext(context);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (signal == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  26:  &lt;/span&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:  &lt;/span&gt;        signal.Raise(e, context);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  28:  &lt;/span&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  30:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:  &lt;/span&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsFiltered(ExceptionContext context)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  32:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:  &lt;/span&gt;            &lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  34:  &lt;/span&gt;        var config = context.HttpContext.GetSection(&lt;span class="str"&gt;"elmah/errorFilter"&lt;/span&gt;)&lt;span class="kwrd"&gt;as&lt;/span&gt; ErrorFilterConfiguration;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (config == &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  36:  &lt;/span&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;false&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  38:  &lt;/span&gt;        var testContext = &lt;span class="kwrd"&gt;new&lt;/span&gt; ErrorFilterModule.AssertionHelperContext(context.Exception, HttpContext.Current);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  39:  &lt;/span&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; config.Assertion.Test(testContext);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  40:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  41:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  42:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  43:  &lt;/span&gt;    &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; LogException(Exception e)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  44:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  45:  &lt;/span&gt;        var context = HttpContext.Current;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  46:  &lt;/span&gt;        ErrorLog.GetDefault(context).Log(&lt;span class="kwrd"&gt;new&lt;/span&gt; Error(e, context));&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  47:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  48:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  49:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Damit das Logging greift, muss der Filter natürlich auch angewendet werden. Idealerweise in einem Basiscontroller, von dem alle anderen Controller dann ableiten, damit man die Deklaration nicht mehrfach durchführen muss.&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;[HandleErrorWithElmah]&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; BaseController : Controller&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;   ...&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fertig&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Das war's schon. Ab sofort werden alle Fehler in der Datenbank geloggt und können über /elmah.axd abgerufen werden, wahlweise über das Web-Interface oder als RSS-Feed, oder, oder, oder ... Happy logging.&lt;/p&gt;


    
    
    


&lt;/div&gt;






&lt;hr /&gt;
&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.thomasbandt.de/39/2380/de/blog/elmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html&amp;title=ELMAH+mit+ASP.NET+MVC+nutzen+und+Fehler+loggen"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.thomasbandt.de%2f39%2f2380%2fde%2fblog%2felmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html" border="0" alt="kick it on dotnet-kicks.de" style="vertical-align:middle" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2380/de/blog/elmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html#Comments"&gt;&lt;img src="http://blog.thomasbandt.de/CommentCounter.ashx?ArticleID=d566b605-17de-450f-9b8f-9464444d33ff" style="border:solid 0px black" /&gt;&lt;/a&gt; | &lt;a href="http://blog.thomasbandt.de/39/2380/de/blog/elmah-mit-aspnet-mvc-nutzen-und-fehler-loggen.html#AddComment"&gt;Kommentieren&lt;/a&gt; | &amp;copy; 2011 &lt;a href="http://blog.thomasbandt.de/"&gt;Thomas Bandt&lt;/a&gt;
</description>
      <pubDate>Tue, 11 Jan 2011 14:33:00 +0100</pubDate>
      <a10:rights type="text">Thomas Bandt</a10:rights>
      <a10:contributor>
        <a10:name>Thomas Bandt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Bandt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://condeso.wordpress.com/?p=28</guid>
      <link>http://condeso.wordpress.com/2011/01/11/bilddateien-zur-laufzeit-in-seadragondateien-dzi-generieren/</link>
      <a10:author>
        <a10:name>Dominik Heine</a10:name>
      </a10:author>
      <title>Bilddateien zur Laufzeit in Seadragondateien (*.dzi) generieren</title>
      <description>Im neuen Ajax Control Toolkit für ASP.NET 4.0 ist das Steuerelement &amp;#8222;Seadragon&amp;#8220; hinzu gekommen. Mit diesem Control können hoch aufgelöste bzw. sehr große Bilddaten (*.tif, *.jpg usw.) schnell im Browser geladen werden. Außerdem stellt das Seadragon Steuerelement div. Funktionalitäten z.B. Zoomen usw. &amp;#8230; &lt;a href="http://condeso.wordpress.com/2011/01/11/bilddateien-zur-laufzeit-in-seadragondateien-dzi-generieren/"&gt;Weiterlesen &lt;span class="meta-nav"&gt;&amp;#8594;&lt;/span&gt;&lt;/a&gt;&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=28&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</description>
      <pubDate>Tue, 11 Jan 2011 13:43:45 Z</pubDate>
      <a10:rights type="text">Dominik Heine</a10:rights>
      <a10:content type="html">&lt;p&gt;Im neuen Ajax Control Toolkit für ASP.NET 4.0 ist das Steuerelement &amp;#8222;Seadragon&amp;#8220; hinzu gekommen. Mit diesem Control können hoch aufgelöste bzw. sehr große Bilddaten (*.tif, *.jpg usw.) schnell im Browser geladen werden. Außerdem stellt das Seadragon Steuerelement div. Funktionalitäten z.B. Zoomen usw. zur Verfügung. Nähere Informationen zu diesem Steuerelement bekommt man &lt;a href="http://www.seadragon.com/developer/ajax"&gt;&lt;/a&gt;hier.&lt;/p&gt;
&lt;p&gt;Wenn man frisch mit dem Seadragon Control anfängt, stolpert man schnell über einige Hürden und muss sich mühsehlig Informationen zusammen suchen. Da das Control nicht mit Bilddateien arbeitet, sondern mit dzi Dateien, muss man die Bilddaten umwandeln. Da dies nicht so einfach ist und auch bei Microsoft dazu bisher kaum etwas dokumentiert wurde möchte ich das hier kurz erklären:&lt;/p&gt;
&lt;p&gt;Zunächst sollte man das Steuerelement auf die ASP.NET Seite ziehen.&lt;/p&gt;
&lt;p&gt;Wichtig: AjaxControlToolkit für .NET 4.0 muss installiert sein!&lt;/p&gt;
&lt;pre class="brush: xml;"&gt;
&amp;lt;asp:Seadragon ID=&amp;quot;Seadragon1&amp;quot; SourceUrl=&amp;quot;317044.xml&amp;quot; runat=&amp;quot;server&amp;quot; BackColor=&amp;quot;Black&amp;quot; BorderStyle=&amp;quot;Solid&amp;quot; BorderWidth=&amp;quot;1px&amp;quot; BorderColor=&amp;quot;Black&amp;quot; Width=&amp;quot;500px&amp;quot; Height=&amp;quot;400px&amp;quot; ForeColor=&amp;quot;White&amp;quot;&amp;gt;
                        &amp;lt;/asp:Seadragon&amp;gt;
&lt;/pre&gt;
&lt;p&gt; Dabei muss beachtet werden, dass die Eigenschaften BackColor, BorderStyle, BorderWidth, BorderColor, Width, Height und ForeColor eingestellt sein! Sonst wird kein Bild angezeigt. Klingt komisch, ist aber so&amp;#8230;&lt;/p&gt;
&lt;p&gt;Als nächstes muss man im CodeBehind eine Methode zum Generieren der *.dzi Dateien schreiben. Dazu muss man einen Verweis im Webprojekt auf die DeepZoomTools.dll von Microsoft setzen.&lt;/p&gt;
&lt;pre class="brush: csharp;"&gt;
private void FillSeaDragon(string imageUrl)
        {
            ImageCreator ic = new ImageCreator();

            ic.TileSize = 256;
            ic.TileFormat = ImageFormat.Jpg;
            ic.ImageQuality = 0.95;
            ic.TileOverlap = 0;

            string target = WebConfigurationManager.AppSettings[&amp;quot;ImagePath&amp;quot;] + &amp;quot;output_images\\&amp;quot; + Path.GetFileNameWithoutExtension(imageUrl);
            string urlpath = WebConfigurationManager.AppSettings[&amp;quot;ImageUrl&amp;quot;] + &amp;quot;output_images/&amp;quot; + Path.GetFileNameWithoutExtension(imageUrl) + &amp;quot;.xml&amp;quot;;
            ic.Create(imageUrl, target);

            Seadragon1.SourceUrl = urlpath;
        }
&lt;/pre&gt;
&lt;p&gt;Zu guter Letzt, kann diese Methode z.B. in der Page_Load Methode aufgerufen werden.&lt;/p&gt;
&lt;br /&gt;  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gofacebook/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gotwitter/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/condeso.wordpress.com/28/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/condeso.wordpress.com/28/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=28&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</a10:content>
      <a10:contributor>
        <a10:name>Dominik Heine</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dominik Heine</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.tfsblog.de/?p=1627</guid>
      <link>http://feedproxy.google.com/~r/AITTeamSystemProBlog/~3/9ix4LyM8KD0/</link>
      <a10:author>
        <a10:name>Sven Hubert</a10:name>
      </a10:author>
      <title>Öffnen von Build Workflows beschleunigen</title>
      <description>Das Laden eines Build Workflows kann in Abhängigkeit von der Komplexität des Build Workflows im VS 2010 einige Zeit in Anspruch nehmen. Dies können Sie mit ein paar einfachen Tricks beschleunigen...</description>
      <pubDate>Tue, 11 Jan 2011 13:30:00 Z</pubDate>
      <a10:rights type="text">Sven Hubert</a10:rights>
      <a10:content type="html">&lt;p&gt;Das Laden eines Build Workflows kann in Abhängigkeit von der Komplexität des Build Workflows im VS 2010 einige Zeit in Anspruch nehmen. Dies können Sie mit ein paar einfachen Tricks beschleunigen&amp;#8230;&lt;/p&gt;
&lt;p&gt;  &lt;span id="more-1627"&gt;&lt;/span&gt; Ewald Hofman hat eine Anleitung zusammengestellt (siehe [1]), welche den Ladevorgang&amp;#160; im Visual Studio 2010 spürbar beschleunigen kann.
&lt;p&gt;Im folgenden haben wir die Anleitung von Ewald ins dt. übersetzt:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;1. Erstellen Sie eine Datei namens &lt;strong&gt;empty.xaml &lt;/strong&gt;und hinterlegen Sie den folgenden Text:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;lt;Activity xmlns=&amp;quot;http://schemas.microsoft.com/netfx/2009/xaml/activities&amp;quot;&amp;gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&amp;lt;/Activity &amp;gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2. Öffnen Sie diese Datei in Visual Studio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;3. In der Toolbox fügen Sie einen neuen Tab namens &lt;strong&gt;&amp;quot;Team Foundation Build Activities&amp;quot;&lt;/strong&gt;&lt;/em&gt; hinzu &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Achten Sie auf die richtige Schreibweise des Tabs, denn sonst werden die Activities nicht richtig geladen.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;4. Innerhalb der neuen Registerkarte klicken Sie die rechte Maustaste und wählen Sie dann &lt;strong&gt;&amp;quot;Choose Items&amp;quot;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;5. Klicken Sie auf die Schaltfläche &lt;strong&gt;&amp;quot;Browse&amp;quot;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;6. Laden Sie die Datei “&lt;strong&gt;C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.TeamFoundation.Build.Workflow\v4.0_10.0.0.0__b03f5f7f11d50a3a\Microsoft.TeamFoundation.Build.Workflow.dll”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;7. Klicken Sie auf OK um die Activities aus der Assembly hinzuzufügen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;8. Erstellen Sie einen weiteren neuen Tab mit dem Namen &lt;strong&gt;&amp;quot;Team Foundation LabManagement Activities&amp;quot;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;9. Innerhalb der neuen Registerkarte klicken Sie die rechte Maustaste und wählen Sie&amp;#160; dann &lt;strong&gt;&amp;quot;Choose Items&amp;quot;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;10. Klicken Sie auf die Schaltfläche &amp;quot;&lt;/em&gt;&lt;em&gt;&lt;strong&gt;Browse&lt;/strong&gt;&lt;/em&gt;&lt;em&gt;&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;11. Laden Sie die Datei &lt;strong&gt;“C:\Windows\Microsoft.NET\assembly\GAC_MSIL\Microsoft.TeamFoundation.Lab.Workflow.Activities\v4.0_10.0.0.0__b03f5f7f11d50a3a\Microsoft.TeamFoundation.Lab.Workflow.Activities.dll”&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;12. Klicken Sie auf OK um die Activities aus der Assembly hinzuzufügen&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quelle:&lt;/p&gt;
&lt;p&gt;&lt;a title="http://www.ewaldhofman.nl/post/2010/10/01/Customize-Team-Build-2010-e28093-Part-11-Speed-up-opening-my-build-process-template.aspx" href="http://www.ewaldhofman.nl/post/2010/10/01/Customize-Team-Build-2010-e28093-Part-11-Speed-up-opening-my-build-process-template.aspx"&gt;[1] http://www.ewaldhofman.nl/post/2010/10/01/Customize-Team-Build-2010-e28093-Part-11-Speed-up-opening-my-build-process-template.aspx&lt;/a&gt;&lt;/p&gt;
&lt;img src="http://feeds.feedburner.com/~r/AITTeamSystemProBlog/~4/9ix4LyM8KD0" height="1" width="1"/&gt;</a10:content>
      <a10:contributor>
        <a10:name>Sven Hubert</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven Hubert</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.thomasbandt.de/39/2379/de/blog/aspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html</guid>
      <link>http://blog.thomasbandt.de/39/2379/de/blog/aspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html</link>
      <a10:author>
        <a10:name>Thomas Bandt</a10:name>
      </a10:author>
      <title>ASP.NET MVC - benutzerfreundliche Fehlerseiten anzeigen</title>
      <description>



    	

        
&lt;div id="1_Show_Content" class="BlogPostContainer"&gt;
	

    
    
    &lt;p&gt;Schon bei&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2221/de/blog/aspnet-mvc-handling-error-messages.html"&gt;ASP.NET MVC 1.0&lt;/a&gt; (mein Gott, ist das wirklisch schon wieder zwei Jahre her?) gab es über das HandleError-Attribut eine gute Möglichkeit Fehlerseiten zu konfigurieren. Seit ASP.NET MVC 2 ist das gar nicht mehr nötig, es sei denn man möchte die Ausgabe wie im verlinkten Beispiel nach verschienenen Exceptions variieren.&lt;/p&gt;
&lt;p&gt;Es genügt die Platzierung einer Error.aspx bzw. auch Error.cshtml ab MVC 3 im Ordner /Views/Shared. Der Name der View ist dem Framework bekannt und muss nirgendwo mehr zusätzlich konfiguriert werden. Inhaltlich ist man gewohnt frei - man kann sowohl von einer Masterpage/einem Layoutfile ableiten als auch eine normale HTML-Seite zurückliefern, ohne Abhängigkeiten:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;@model System.Web.Mvc.HandleErrorInfo&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;@{&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;    Layout = null;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;}&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="html"&gt;DOCTYPE&lt;/span&gt; &lt;span class="attr"&gt;html&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;html&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;head&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;title&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Fehler&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;title&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;head&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;body&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;h1&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Ooops ...&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;h1&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  14:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;p&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;Leider ist ein Fehler aufgetreten: @Model.Exception.Message&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;p&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;body&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  16:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;html&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Das würde ich auch empfehlen - denn nutzt man eine Masterpage und ruft die wiederum eine View oder eine Action auf, die einen Fehler produziert, dann läuft man gezwungenermaßen in eine Endlosschleife. Also lieber eine vom Layout abweichende einfache Fehlerseite erstellen als dieses Risiko eingehen.&lt;/p&gt;
&lt;p&gt;Das Model ist vom Typ HandleErrorInfo und beinhaltet sowohl die Namen des aufgerufenen Controllers und der Action, in der der Fehler auftrat, als auch die konkret geworfene Exception.&lt;/p&gt;
&lt;p&gt;Damit man diese Seite auch angezeigt bekommt, muss in der Web.config noch ein entsprechender Eintrag hinterlegt werden, der neuerdings nicht mehr in den Projekttemplates zu finden ist:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="html"&gt;xml&lt;/span&gt; &lt;span class="attr"&gt;version&lt;/span&gt;&lt;span class="kwrd"&gt;="1.0"&lt;/span&gt; &lt;span class="attr"&gt;encoding&lt;/span&gt;&lt;span class="kwrd"&gt;="UTF-8"&lt;/span&gt;?&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;system.web&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;customErrors&lt;/span&gt; &lt;span class="attr"&gt;mode&lt;/span&gt;&lt;span class="kwrd"&gt;="On"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;system.web&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;configuration&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Für die Konfiguration gibt es folgende Optionen:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;On - die benutzerfreundliche Fehlermeldung wird immer angezeigt&lt;/li&gt;
    &lt;li&gt;RemoteOnly - lokal erhält man den bekannten "Yellow Screen Of Death", nur remote bekommt man dann die eigene Fehlerseite. Empfohlene Konfiguration für Produktivumgebungen.&lt;/li&gt;
    &lt;li&gt;Off - die eigene Fehlerseite wird nie angezeigt.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it.&lt;/p&gt;


    
    
    


&lt;/div&gt;






&lt;hr /&gt;
&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.thomasbandt.de/39/2379/de/blog/aspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html&amp;title=ASP.NET+MVC+-+benutzerfreundliche+Fehlerseiten+anzeigen"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.thomasbandt.de%2f39%2f2379%2fde%2fblog%2faspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html" border="0" alt="kick it on dotnet-kicks.de" style="vertical-align:middle" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2379/de/blog/aspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html#Comments"&gt;&lt;img src="http://blog.thomasbandt.de/CommentCounter.ashx?ArticleID=6f9d77a0-839a-4ef1-9508-3e9a3f5e7448" style="border:solid 0px black" /&gt;&lt;/a&gt; | &lt;a href="http://blog.thomasbandt.de/39/2379/de/blog/aspnet-mvc-benutzerfreundliche-fehlerseiten-anzeigen.html#AddComment"&gt;Kommentieren&lt;/a&gt; | &amp;copy; 2011 &lt;a href="http://blog.thomasbandt.de/"&gt;Thomas Bandt&lt;/a&gt;
</description>
      <pubDate>Tue, 11 Jan 2011 13:23:00 +0100</pubDate>
      <a10:rights type="text">Thomas Bandt</a10:rights>
      <a10:contributor>
        <a10:name>Thomas Bandt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Bandt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-5601714198208780275.post-1574097326018531851</guid>
      <link>http://feedproxy.google.com/~r/blogspot/jcselke/~3/DvxMUM3Okrs/jquery-im-sharepoint-server-2010-fur.html</link>
      <a10:author>
        <a10:name>Jan Christian Selke</a10:name>
      </a10:author>
      <title>JQuery im Sharepoint Server 2010 für Dummies²</title>
      <description>&lt;p&gt;Um JQuery in den Sharepoint Server 2010 einzubinden, gibt es verschiedene Möglichkeiten. Beschrieben wurden diese Möglichkeiten etwa von &lt;a href="http://weblogs.asp.net/jan/archive/2010/03/01/scriptsrc-referencing-javascript-files-with-sharepoint-2010-custom-actions.aspx" target="_blank"&gt;Jan Tielens&lt;/a&gt;, &lt;a href="http://blog.voyta.net/2010/09/12/referencing-javascript-files-using-customaction-in-sharepoint-2010-sandboxed-solutions/" target="_blank"&gt;Voyta&lt;/a&gt; aber auch Anderen.&lt;/p&gt;&lt;p&gt;Als Anfänger in diesem Thema habe ich mich also Schritt für Schritt an deren Anleitung langgehangelt. Aber letztlich wollte nach dem Deployment in den Sharepoint einfach keine &lt;em&gt;jquery-1.4.1.js&lt;/em&gt; Datei in dem Ordner JQuery innerhalb des Layouts Verzeichnis des Sharepoint Servers erscheinen.&lt;/p&gt;&lt;p&gt;Nach einigen Versuchen und etwas Internetrecherche stellte ich fest, dass nur eine Kleinigkeit fehlte damit die JQuery Datei, und damit auch jede andere Javascript Datei, in das &lt;em&gt;/_layouts&lt;/em&gt; Verzeichnis verteilt wird. Die Lösung ist ebenso so schlagend wie einfach:&lt;/p&gt;&lt;p&gt;Einen zugeordneten Sharepoint-Ordner “Layouts” im Visual Studio hinzufügen.&lt;/p&gt;&lt;p&gt;&lt;a href="http://lh6.ggpht.com/_6MDRCGJmRdA/TSxB75rSSVI/AAAAAAAAAKg/6ksVjGyu-DE/s1600-h/AddFolder%5B12%5D.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="AddFolder" border="0" alt="AddFolder" src="http://lh6.ggpht.com/_6MDRCGJmRdA/TSxB8yfyHnI/AAAAAAAAAKk/VXV4RqKP-Sg/AddFolder_thumb%5B10%5D.png?imgmax=800" width="823" height="186" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In diesen Ordner wird die JQuery Datei aus dem Modulordner verschoben und die elements.xml entsprechend angepasst.&lt;/p&gt;&lt;p&gt;&lt;a href="http://lh4.ggpht.com/_6MDRCGJmRdA/TSxB9im5NbI/AAAAAAAAAKo/Dr4UvGflXKw/s1600-h/LayoutsFolder%5B10%5D.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="LayoutsFolder" border="0" alt="LayoutsFolder" src="http://lh3.ggpht.com/_6MDRCGJmRdA/TSxB9-pXXCI/AAAAAAAAAKs/FRbu7ImQLes/LayoutsFolder_thumb%5B6%5D.png?imgmax=800" width="296" height="100" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Die CustomAction bleibt unverändert und jetzt wird nach dem Deployment auch der Ordner /&lt;em&gt;JQuery &lt;/em&gt;unterhalb des Ordners &lt;em&gt;/Layouts&lt;/em&gt; angelegt und die Datei &lt;em&gt;jquery-1.4.1.js&lt;/em&gt; dort abgelegt. Warum nicht gleich so?! ;-)&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/5601714198208780275-1574097326018531851?l=jcselke.blogspot.com' alt='' /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/blogspot/jcselke?a=DvxMUM3Okrs:OMyFrjiJtkg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/blogspot/jcselke?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/blogspot/jcselke?a=DvxMUM3Okrs:OMyFrjiJtkg:xZ3Pn_mapoI"&gt;&lt;img src="http://feeds.feedburner.com/~ff/blogspot/jcselke?d=xZ3Pn_mapoI" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/jcselke/~4/DvxMUM3Okrs" height="1" width="1"/&gt;</description>
      <pubDate>Tue, 11 Jan 2011 13:07:00 Z</pubDate>
      <a10:updated>2011-01-11T05:07:50-08:00</a10:updated>
      <a10:rights type="text">Jan Christian Selke</a10:rights>
      <a10:contributor>
        <a10:name>Jan Christian Selke</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Christian Selke</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.thomasbandt.de/39/2378/de/blog/aspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html</guid>
      <link>http://blog.thomasbandt.de/39/2378/de/blog/aspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html</link>
      <a10:author>
        <a10:name>Thomas Bandt</a10:name>
      </a10:author>
      <title>ASP.NET MVC - Fehlermeldungen für Ajax-Requests ausgeben</title>
      <description>



    	

        
&lt;div id="2_Show_Content" class="BlogPostContainer"&gt;
	

    
    
    &lt;p&gt;Analog zum Beispiel mit dem&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html"&gt;Login-Check&lt;/a&gt; sollte man auch bei allen anderen Fehlern, die bei Ajax-Aufrufen passieren, den Benutzer nicht im Regen stehen lassen. Im klassischen Fall eines GET- oder POST-Aufrufs erhält man ja schließlich auch eine Fehlermeldung (mal mehr und mal weniger schön und vielsagend), das sollte auch für Ajax-Aufrufe gelten, bei denen Fehler ansonsten "verschluckt" werden.&lt;/p&gt;
&lt;p&gt;Wie auch beim klassischen serverseitigen Exceptionhandling sollte man sich nicht in Details verlieren und um jeden Aufruf einen try-/catch-Block bauen oder manuell Error-Handler für Aufrufe einhängen, sondern wenn möglich die Fehler an einer sehr hoch gehängten Stelle zentral abfangen und verarbeiten.&lt;/p&gt;
&lt;p&gt;Das lässt sich auf der Serverseite mit ASP.NET MVC z.B. durch die Verwendung eines Basis-Controllers und die Nutzung&amp;nbsp;seines OnException-Events nutzen:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; BaseController : Controller&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; OnException(ExceptionContext filterContext)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;        &lt;span class="rem"&gt;// Fehlermeldung für Ajax-Requests ausgeben&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt;(filterContext.HttpContext.Request.IsAjaxRequest())&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;        {&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;            filterContext.RequestContext.HttpContext.Response.Write(filterContext.Exception.Message);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;            filterContext.RequestContext.HttpContext.Response.ContentType = MediaTypeNames.Text.Plain;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;            filterContext.RequestContext.HttpContext.Response.StatusCode = 500;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;            filterContext.ExceptionHandled = &lt;span class="kwrd"&gt;true&lt;/span&gt;;    &lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.OnException(filterContext);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  14:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Was passiert hier?&amp;nbsp;Zunächst einmal hängen wir uns hier nur rein, wenn es sich um einen Ajax-Request handelt, alle anderen Fehler&amp;nbsp;werden wie gewohnt behandelt (oder auch nicht). Die Ausgabe schreiben wir um, und zwar geben wir die Exception-Message als&amp;nbsp;reinen Text aus. Der Status-Code wird auf 500 gesetzt - nur so bekommt jQuery später mit, dass ein Fehler aufgetreten ist. Lässt man den Part weg, gibt es einen Code 200 und der Request wird auf der Client-Seite&amp;nbsp;ganz normal abgearbeitet.&amp;nbsp;Alternativ kann man diesen Part auch in einen eigenen Filter legen, wenn man die Verarbeitung z.B. nicht für alle oder auch nur einen ganzen einzelnen Controller sondern nur für eine Action haben möchte.&lt;/p&gt;
&lt;p&gt;Im nächsten Schritt muss der Client nun nur noch etwas davon mitbekommen:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;$().ready(function () {&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;    $(&lt;span class="str"&gt;'#AppStatusBar'&lt;/span&gt;).ajaxError(function (xhr, status, err) {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;        alert(&lt;span class="str"&gt;"Fehler: "&lt;/span&gt; + status.responseText);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    });&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;});&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Der Error-Handler muss wie bereits im Login-Post gesagt an irgendein DOM-Objekt gehängt werden, was möglichst auf jeder Seite vorhanden ist. Ruft man dann eine Action z.B. per $.post() auf und schmeißt diese irgendeine Exception, dann gibt's die Exception-Message als Alert vor die Nase des Benutzers.&lt;/p&gt;


    
    
    


&lt;/div&gt;






&lt;hr /&gt;
&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.thomasbandt.de/39/2378/de/blog/aspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html&amp;title=ASP.NET+MVC+-+Fehlermeldungen+f%c3%bcr+Ajax-Requests+ausgeben"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.thomasbandt.de%2f39%2f2378%2fde%2fblog%2faspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html" border="0" alt="kick it on dotnet-kicks.de" style="vertical-align:middle" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2378/de/blog/aspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html#Comments"&gt;&lt;img src="http://blog.thomasbandt.de/CommentCounter.ashx?ArticleID=79955e65-2305-4245-bed3-28da5d3fbf57" style="border:solid 0px black" /&gt;&lt;/a&gt; | &lt;a href="http://blog.thomasbandt.de/39/2378/de/blog/aspnet-mvc-fehlermeldungen-fuer-ajax-requests-ausgeben.html#AddComment"&gt;Kommentieren&lt;/a&gt; | &amp;copy; 2011 &lt;a href="http://blog.thomasbandt.de/"&gt;Thomas Bandt&lt;/a&gt;
</description>
      <pubDate>Tue, 11 Jan 2011 12:57:00 +0100</pubDate>
      <a10:rights type="text">Thomas Bandt</a10:rights>
      <a10:contributor>
        <a10:name>Thomas Bandt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Bandt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://devtyr.norberteder.com/post.aspx?id=53492525-95dc-4eb4-9b4f-f5ba6b70775a</guid>
      <link>http://devtyr.norberteder.com/post/Empfehlunge28093Michael-Mittermeiere28093Achtung-BABY!.aspx</link>
      <a10:author>
        <a10:name>Norbert Eder</a10:name>
      </a10:author>
      <title>Empfehlung–Michael Mittermeier–Achtung BABY!</title>
      <description>&lt;p&gt;&lt;img style="margin: 0px 10px 10px 0px; display: inline; float: left" align="left" src="http://ecx.images-amazon.com/images/I/51TWnNlgMXL._SS400_.jpg" width="141" height="141" /&gt;&lt;/p&gt;  &lt;p&gt;&lt;em&gt;Vater werden ist ist nicht schwer – Vater sein dagegen sehr.&lt;/em&gt; So hat es Wilhelm Busch in seiner Knopp-Trilogie formuliert. Damit hat er auch nicht so ganz unrecht.&lt;/p&gt;  &lt;p&gt;Wer bereits Kinder hat und auch gerne an die Zeit, als der erste Kinderwunsch, die darauf folgende Schwangerschaft der Frau und der Geburt mit allen seinen Facetten zurück denkt, dem sei &lt;strong&gt;Achtung Baby!&lt;/strong&gt; von &lt;strong&gt;Michael Mittermeier&lt;/strong&gt; ans Herz gelegt. Es ist sowohl als Buch, als auch als Hörbuch verfügbar. Als Verkürzung der Autofahrten habe ich mir das Hörbuch gekauft.&lt;/p&gt;  &lt;p&gt;Trotz – vielleicht auch gerade wegen - seines Komiker-Daseins bringt Mittermeier viele Dinge wirklich ziemlich treffend auf den Punkt. Es sind seine Erfahrungen, die er gemacht hat, lustig erzählt. Typische Klischees werden unter die Lupe genommen, als auch nicht alltägliche Probleme zum Besten gegeben.&lt;/p&gt;  &lt;p&gt;Wer kurz davor steht, Vater oder Mutter zu werden, dies kürzlich wurde, oder einfach nur darüber nachdenkt, dem kann Achtung Baby! getrost empfohlen werden. Kurzweilig und mit hohem Wiedererkennungswert. &lt;/p&gt;  &lt;p&gt;Einfach empfehlenswert.&lt;/p&gt;  &lt;p&gt;Weitere Informationen gibt es auf der Website von &lt;a href="http://www.mittermeier.de/" target="_blank"&gt;Michael Mittermeier&lt;/a&gt;.&lt;/p&gt;</description>
      <pubDate>Tue, 11 Jan 2011 10:00:00 +0100</pubDate>
      <a10:rights type="text">Norbert Eder</a10:rights>
      <a10:contributor>
        <a10:name>Norbert Eder</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Norbert Eder</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.des-eisbaeren-blog.de/post.aspx?id=66f94773-a07b-4d9c-ab78-a7a088499df0</guid>
      <link>http://www.des-eisbaeren-blog.de/post/2011/01/11/lt;xmlrepositorychgt;.aspx</link>
      <a10:author>
        <a10:name>Golo Roden</a10:name>
      </a10:author>
      <title>&lt;xmlrepository.ch&gt;</title>
      <description>&lt;p&gt;Das neue Jahr beginnt - mit der Ver&amp;ouml;ffentlichung eines neuen Projekts: &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt; hei&amp;szlig;t das neue Projekt, das &lt;a href="http://peterbucher.ch/"&gt;Peter Bucher&lt;/a&gt; und ich gemeinsam entwickelt haben, und das unter &lt;a href="http://www.xmlrepository.ch"&gt;www.xmlrepository.ch&lt;/a&gt; als Download f&amp;uuml;r .NET 3.5 verf&amp;uuml;gbar ist.&lt;/p&gt;
&lt;p&gt;Doch worum handelt es sich bei diesem Projekt? &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt; wird auf der Webseite als&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XML-basiertes, threadsicheres Repository f&amp;uuml;r flache .NET-Objekte, welches das Dateisystem und In-Memory unterst&amp;uuml;tzt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;beschrieben. Es bietet also die M&amp;ouml;glichkeit, einfache Objekte zu serialisieren und sp&amp;auml;ter wieder zu deserialisieren - beispielsweise als einfache M&amp;ouml;glichkeit zur Datenhaltung f&amp;uuml;r eine Webseite, bei der die Installation einer Datenbank zu aufw&amp;auml;ndig w&amp;auml;re.&lt;/p&gt;
&lt;p&gt;Verschachtelte Objekte werden dabei ebenso wenig unterst&amp;uuml;tzt wie komplexe Datentypen, doch gerade in dieser Einfachheit liegt die St&amp;auml;rke von &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt; - h&amp;auml;ufig gen&amp;uuml;gen n&amp;auml;mlich eben solche Objekte v&amp;ouml;llig, beispielsweise f&amp;uuml;r die Verwaltung von Downloads oder von Blogeintr&amp;auml;gen.&lt;/p&gt;
&lt;p&gt;Im Gegensatz zu den g&amp;auml;ngigen Serialisierungsm&amp;ouml;glichkeiten, die in .NET bereits integriert verf&amp;uuml;gbar sind, unterst&amp;uuml;tzt &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt;&amp;nbsp;Abfragen, das hei&amp;szlig;t, es m&amp;uuml;ssen nicht zwingend alle Objekte zur&amp;uuml;ckgegeben werden, sondern dies kann auch selektiv geschehen.&lt;/p&gt;
&lt;p&gt;Einen ersten Eindruck, wie einfach der Umgang mit &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt;&amp;nbsp;gelingt, findet sich als Beispiel bereits auf der Projektwebseite:&lt;/p&gt;
&lt;pre class="brush: c-sharp;"&gt;XmlRepository.DefaultQueryProperty = "Id";
XmlRepository.DataProvider = new XmlFileProvider("~/App_Data/");

using(var repository = XmlRepository.GetInstance&amp;lt;Foo&amp;gt;()) {
    var foos = repository.LoadAllBy(f =&amp;gt; f.Id &amp;gt; 42);
    repository.SaveOnSubmit(new Foo { Id = 27, ... });
    repository.DeleteOnSubmit(f =&amp;gt; f.Id == 23);
}&lt;/pre&gt;
&lt;p&gt;Wesentlich mehr ist nicht erforderlich, um ein entsprechendes Repository zu benutzen. Wird keine &lt;em&gt;DefaultQueryProperty&lt;/em&gt; angegeben, so wird diese mit dem Wert &lt;em&gt;Id&lt;/em&gt; vorbelegt. Wird kein &lt;em&gt;DataProvider&lt;/em&gt; angegeben, so wird dieser mit dem &lt;em&gt;XmlFileProvider&lt;/em&gt;&amp;nbsp;und dem aktuellen Verzeichnis als Datenordner verwendet.&lt;/p&gt;
&lt;p&gt;Seit der Version 1.1, die bereits gestern Abend erschienen ist, unterst&amp;uuml;tzt &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt; zudem LINQ, so dass an Stelle der jeweiligen &lt;em&gt;Load&lt;/em&gt;-Methoden auch LINQ-Abfragen genutzt werden k&amp;ouml;nnen:&lt;/p&gt;
&lt;pre class="brush: c-sharp;"&gt;var foo =
    from f in XmlRepository.GetInstance&amp;lt;Foo&amp;gt;()
    where ...
    select f;&lt;/pre&gt;
&lt;p&gt;Nat&amp;uuml;rlich kann &lt;em&gt;&amp;lt;xmlrepository.ch&amp;gt;&lt;/em&gt; keine ausgewachsene Datenbank ersetzen - f&amp;uuml;r einfache F&amp;auml;lle wie oben beschrieben gen&amp;uuml;gt es aber vollkommen, kommt ohne eigenen Windows-Dienst und umfangreiche Assemblies aus, und arbeitet (f&amp;uuml;r XML-Verh&amp;auml;ltnisse) ausreichend schnell, um mit einigen hundert oder tausend Datens&amp;auml;tzen umzugehen.&lt;/p&gt;
&lt;p&gt;In diesem Sinne - viel Erfolg und Spa&amp;szlig; beim Einsatz dieser kleinen Komponente!&lt;/p&gt;</description>
      <pubDate>Tue, 11 Jan 2011 09:37:00 +0100</pubDate>
      <a10:rights type="text">Golo Roden</a10:rights>
      <a10:contributor>
        <a10:name>Golo Roden</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Golo Roden</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">ce930855-ae9b-4fa4-8077-06a76071cc6a:220482</guid>
      <link>http://www.aspnetzone.de/blogs/peterbucher/archive/2011/01/11/das-neue-projekt-der-zwei-http-www-xmlrepository-ch.aspx</link>
      <a10:author>
        <a10:name>Peter Bucher</a10:name>
      </a10:author>
      <title>Das neue Projekt der "zwei" - http://www.xmlrepository.ch/</title>
      <description>&lt;a href="http://www.goloroden.de/"&gt;Golo Roden&lt;/a&gt; und meine Wenigkeit haben sich seit langem wieder eine Auszeit aus der stressigen Realität gegönnt.&lt;br&gt;&lt;br&gt;Dabei kam die Idee auf, eine schon etwas ältere Idee neu anzupacken, zu verfeinern, sodass etwas richtig gutes, brauchbares hinten rauskommt.&lt;br&gt;Der Name bleibt gleich wie er schon bei der älteren Idee war "XmlRepository". Nur hat sich basierend auf der älteren Idee und deren Eigenheiten "&lt;b&gt;schlank, einfach, praktisch&lt;/b&gt;" etwas viel praktischeres und brauchbareres gegeben, als es der frühere Prototyp war.&lt;br&gt;&lt;br&gt;XmlRepository - das es auf &lt;a href="http://www.xmlrepository.ch/"&gt;http://www.xmlrepository.ch/&lt;/a&gt; zum Download gibt, ist wie folgt auf der Seite selber kurz umschrieben:&lt;br&gt;&lt;br&gt;
&lt;div class="Quotes"&gt;XML-basiertes, threadsicheres Repository für flache .NET-Objekte, welches&lt;br&gt;
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;das Dateisystem und In-Memory unterstützt.&lt;/div&gt;
&lt;br&gt;&lt;br&gt;
&lt;p&gt;Folgend ein bisschen Beispielcode, damit jeder sich ein ungefähres Bild der Anwendung machen kann:&lt;/p&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;code&gt;&lt;span style="color: Black;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;XmlRepository.DefaultQueryProperty &lt;span style="color: Red;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;=&lt;/span&gt; &lt;span style="color: #666666;background-color: #e4e4e4;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;"Id"&lt;/span&gt;;&lt;br /&gt;                            XmlRepository.DataProvider &lt;span style="color: Red;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;=&lt;/span&gt; &lt;span style="color: Blue;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;new&lt;/span&gt; XmlFileProvider(&lt;span style="color: #666666;background-color: #e4e4e4;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;"~/App_Data/"&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;                            &lt;span style="color: Blue;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;using&lt;/span&gt;(var repository &lt;span style="color: Red;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;=&lt;/span&gt; XmlRepository.GetInstance&amp;lt;Foo&amp;gt;) {&lt;br /&gt;                                var foos &lt;span style="color: Red;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;=&lt;/span&gt; repository.LoadAllBy(f =&amp;gt; f.Id &amp;gt; 42);&lt;br /&gt;                                repository.SaveOnSubmit(&lt;span style="color: Blue;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;new&lt;/span&gt; Foo { Id &lt;span style="color: Red;background-color: Transparent;font-family: Courier New;font-size: 14px;font-weight: normal;"&gt;=&lt;/span&gt; 27, ... });&lt;br /&gt;                                repository.DeleteOnSubmit(f =&amp;gt; f.Id == 23);&lt;br /&gt;                            }&lt;/span&gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;XmlRepository ist aus unserer Sicht entwickelt und sehr geeignet für:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Schnell &lt;b&gt;Prototypen &lt;/b&gt;mit simplen Datenstrukturen entwerfen&lt;/li&gt;&lt;li&gt;&lt;b&gt;Einfache und schnelle Einbindung einer Datenquelle&lt;/b&gt; für Datenstrukturen von einfacher bis mittlerer Komplexität&lt;/li&gt;&lt;li&gt;Sehr &lt;b&gt;für Projekte (Web / Client) geeignet&lt;/b&gt;, die &lt;b&gt;nicht &lt;/b&gt;einen &lt;b&gt;sehr grossen Datenbestand&lt;/b&gt;, sowie &lt;b&gt;wenig Schreibende&lt;/b&gt; Zugriffe zu verzeichnen hat&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Sehr effiziente&lt;/b&gt;, &lt;b&gt;typsichere &lt;/b&gt;und &lt;b&gt;bequeme Alternative&lt;/b&gt; für manuelle &lt;b&gt;XML-Anbindung&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;Auch wenn bei dir, werter Leser, kein Anwendungfall zutreffen mag, kann man von jedem Code lernen. Ob es jetzt sei, wie man etwas nicht macht - oder wie man es auch noch - oder besser - machen könnte.&lt;br&gt;&lt;img src="http://www.aspnetzone.de/aggbug.aspx?PostID=220482" width="1" height="1"&gt;</description>
      <pubDate>Tue, 11 Jan 2011 08:37:00 Z</pubDate>
      <a10:rights type="text">Peter Bucher</a10:rights>
      <a10:contributor>
        <a10:name>Peter Bucher</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Bucher</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aspnetzone.de/blogs/juergengutsch/archive/2011/01/11/msbuild-und-konvertierung-der-projektdateien-nach-vs2010.aspx</guid>
      <link>http://feedproxy.google.com/~r/jgutsch/~3/zcXT9WzNFaY/msbuild-und-konvertierung-der-projektdateien-nach-vs2010.aspx</link>
      <a10:author>
        <a10:name>Jürgen Gutsch</a10:name>
      </a10:author>
      <title>MSBuild und Konvertierung der Projektdateien nach VS2010</title>
      <description>&lt;p&gt;Seit einer ganzen Weile sitze ich schon daran mit MSBuild einen einfachen und parametrisierten Build-Prozess aufzusetzen. Zeitglich wird Continous Integration mit Hudson über MSBuild gefahren.&lt;/p&gt;  &lt;p&gt;Nun da allerdings die Projekte zu Visual Studio 2010 konvertiert worden sind, läuft MSBuild (und somit die Continous Integration) nicht mehr durch. &lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Was wahr passiert?&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Ich habe zuerst angenommen, da weiterhin mit .NET 3.5 verwendet werden soll, dass alles wie gehabt laufen könnte. Aber dem War nicht so. &lt;/p&gt;  &lt;p&gt;Die Projektdateien konnten nur noch mit der MSBuild 4.0 kompiliert werden. Ich nehme an, folgender Eintrag und einige weitere Änderungen an der Projektdatei sind der Grund dafür:&lt;/p&gt;  &lt;p&gt;&amp;lt;Project ToolsVersion=&amp;quot;4.0&amp;quot; …&lt;/p&gt;  &lt;p&gt;Also schnell ein paar Pfade ändern und es wird MSBuild aus dem Verzeichnis C:\Windows\Microsoft.NET\Framework64\v4.0.30319\ genutzt und alles sollte durchlaufen, oder?&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Denkste!&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Der Build bricht ab mit folgender Meldung:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;error MSB3086: Task could not find &amp;quot;AL.exe&amp;quot; using the SdkToolsPath &amp;quot;&amp;quot; or the registry key &amp;quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v7.0A&amp;quot;. Make sure the SdkToolsPath is set and the tool exists in the correct processor specific location under the SdkToolsPath and that the Microsoft Windows SDK is installed [D:\Builds\jobs\Continous Integration Build CC\workspace\SVN\Common\Project\Project.vbproj]&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Der Build auf der Entwicklungsmaschine läuft von vornherein, das das SDK mit dem Visual Studio 2010 mit installiert wird. Ich möchte aber auf dem Buildserver nur sehr ungern das Visual Studio haben, installiere ich das neueste &lt;a href="http://www.microsoft.com/downloads/en/details.aspx?familyid=6B6C21D2-2006-4AFA-9702-529FA782D63B&amp;amp;displaylang=en" target="_blank"&gt;SDK 7.1&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Zum glück habe nicht nur ich das Problem, sondern auch viele andere:    &lt;br /&gt;&lt;a title="http://stackoverflow.com/questions/2986440/msbuild-on-teamcity-server-cant-find-al-exe" href="http://stackoverflow.com/questions/2986440/msbuild-on-teamcity-server-cant-find-al-exe"&gt;http://stackoverflow.com/questions/2986440/msbuild-on-teamcity-server-cant-find-al-exe&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So wird schnell klar, dass die Installation der SDK alleine nichts bringt, sondern erst das Ausführen folgender Schritte:&lt;/p&gt;  &lt;blockquote&gt;   &lt;ol&gt;     &lt;li&gt;Go to &amp;quot;Microsoft Windows SDK v7.1&amp;quot; from the Start menu &lt;/li&gt;      &lt;li&gt;Select &amp;quot;Windows SDK 7.1 Command Prompt&amp;quot; and enter &lt;/li&gt;      &lt;li&gt;&amp;gt; cd Setup &lt;/li&gt;      &lt;li&gt;&amp;gt; WindowsSdkVer -version:v7.1 &lt;/li&gt;   &lt;/ol&gt; &lt;/blockquote&gt;  &lt;p&gt;Aber auch dass ist nicht noch nicht alles. &lt;/p&gt;  &lt;p&gt;Der Build läuft nun bis zu folgendem Fehler:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;error MSB4019: The imported project &amp;quot;C:\Program Files (x86)\MSBuild\Microsoft\VisualStudio\v10.0\WebApplications\Microsoft.WebApplication.targets&amp;quot; was not found. Confirm that the path in the &amp;lt;Import&amp;gt; declaration is correct, and that the file exists on disk.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Hier fehlen die nötigen Build-Targets, die im angegebenen Verzeichnis gesucht werden. Ich kopiere also die Targets von der Entwicklungsmaschine auf den Build-Server in das entsprechende Verzeichnis – welches noch erstellt werden muss - und schon rennt es :-)&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Toll, oder?&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Ja, schon toll, aber etwas stört mich dennoch:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Wieso ist MSBuild.exe im Framework enthalten und nicht im SDK?&lt;/li&gt;    &lt;li&gt;Wieso benötigt MSBuild das SDK, wenn es im Framework enthalten ist?&lt;/li&gt;    &lt;li&gt;Wieso sind die WebApplication-Targets nicht im Framework oder im SDK enthalten, sondern nur im Visual Studio 2010?&lt;/li&gt;    &lt;li&gt;Wieso alles für eine einzige Aufgabe in drei verschiedenen, separaten Komponenten verteilt?&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;IMHO sollten - wenn sich die MSBuild.exe schon im Framework befindet - alle benötigten Komponenten auch dort enthalten sein.&lt;/p&gt;&lt;div class="wlWriterHeaderFooter" style="text-align:left;margin:0px;padding:4px 4px 4px 4px;"&gt;&lt;a href="http://dotnet-kicks.de/kick/?url=http://www.aspnetzone.de/blogs/juergengutsch/archive/2011/01/11/msbuild-und-konvertierung-der-projektdateien-nach-vs2010.aspx"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://www.aspnetzone.de/blogs/juergengutsch/archive/2011/01/11/msbuild-und-konvertierung-der-projektdateien-nach-vs2010.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" alt="DotNetKicks-DE Image" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;img src="http://www.aspnetzone.de/aggbug.aspx?PostID=220493" width="1" height="1"&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/jgutsch?a=zcXT9WzNFaY:33XSVCABBXk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/jgutsch?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/jgutsch?a=zcXT9WzNFaY:33XSVCABBXk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/jgutsch?i=zcXT9WzNFaY:33XSVCABBXk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/jgutsch?a=zcXT9WzNFaY:33XSVCABBXk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/jgutsch?i=zcXT9WzNFaY:33XSVCABBXk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/jgutsch?a=zcXT9WzNFaY:33XSVCABBXk:mNpC_eAfmKU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/jgutsch?d=mNpC_eAfmKU" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jgutsch/~4/zcXT9WzNFaY" height="1" width="1"/&gt;</description>
      <pubDate>Tue, 11 Jan 2011 02:07:14 -0800</pubDate>
      <a10:rights type="text">Jürgen Gutsch</a10:rights>
      <a10:contributor>
        <a10:name>Jürgen Gutsch</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jürgen Gutsch</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">6dcdb6ae-26a7-4704-ae8b-cbd278e59bdf:48918</guid>
      <link>http://dotnet-forum.de/blogs/thorstenhans/archive/2011/01/11/schnell-einfach-genial-xmlrepository.aspx</link>
      <a10:author>
        <a10:name>Thorsten Hans</a10:name>
      </a10:author>
      <title>Schnell, einfach, genial, XmlRepository</title>
      <description>&lt;p&gt;Ein jeder von uns hat es bestimmt schon mal geschrieben; Sei es zum Mocken, sei es zum Zeitvertreib oder sei es für den Produktiveinsatz; Aber &lt;a href="http://www.des-eisbaeren-blog.de" target="_blank"&gt;Golo Roden&lt;/a&gt; und &lt;a href="http://www.aspnetzone.de/blogs/peterbucher/" target="_blank"&gt;Peter Bucher&lt;/a&gt; haben es nun auch mal released. Die Rede ist vom XmlRepository. &lt;/p&gt;  &lt;p&gt;Golo und Peter haben in diesen Tagen auf &lt;a href="http://www.XmlRepository.ch"&gt;http://www.XmlRepository.ch&lt;/a&gt; eine kleine Bibliothek zur bequemen Datenspeicherung im Xml-Format bereitgestellt. XmlRepository bedarf keiner großen Beschreibung. Der Name der Assembly impliziert eigentlich deren Aufgabengebiet. Daher lasse ich dies einfach aus ;)&lt;/p&gt;  &lt;p&gt;Mich persönlich hat es gereizt diese Bibliothek auszuprobieren,weil auch ich an allen Ecken und Enden immer mal wieder “ein” XmlRepository schreibe, sei es zum UnitTesting, sei es zum ablegen und laden bestimmter Daten,… Aber ich wollte nun einfach sehen ob sich unsere Ideen und Interpretationen eines XmlRepositories überschneiden und welchen Ansatz die beiden gewählt haben. &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Lange Rede kurzer Sinn – XmlRepository mach Spaß daher möchte ich es einfach zeigen xD&lt;/p&gt;  &lt;p&gt;Ausgehen moechte ich von einer einfachen Personenklasse, welche durch den Einsatz des XmlRepositories zugreifbar gemacht werden soll.&lt;/p&gt;  &lt;div class="csharpcode"&gt;   &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; Person&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; FirstName { get; set; }&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; LastName { get; set; }&lt;/pre&gt;

  &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; DateTime DateOfBirth { get; set; }&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;bool&lt;/span&gt; IsDeveloper { get; set; }&lt;/pre&gt;

  &lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Zunächst 2 Anweisungen Infrastruktur, die dazu dienen die folgenden XmlRepositories zu konfigurieren&lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;XmlRepository.XmlRepository.DataProvider =  &lt;/pre&gt;

  &lt;pre&gt;     &lt;span class="kwrd"&gt;new&lt;/span&gt; XmlRepository.DataProviders.XmlInMemoryProvider();&lt;/pre&gt;

  &lt;pre class="alt"&gt;XmlRepository.XmlRepository.DefaultQueryProperty = &lt;/pre&gt;

  &lt;pre&gt;     &lt;span class="str"&gt;&amp;quot;LastName&amp;quot;&lt;/span&gt;;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;zum einen wird der DataProvider hier auf &lt;strong&gt;InMemory &lt;/strong&gt;festgelegt – alternativ kann noch &lt;strong&gt;InFile&lt;/strong&gt; angegeben werden. Im zweiten und letzten “infrastrukturellen” Schritt wird noch der “Identifier” fürs Repository festgelegt. &lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;h3&gt;Und schon kann&amp;#39;s auch schon losgehen&lt;/h3&gt;

&lt;p&gt;Instanz erstellen&lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;repository = &lt;/pre&gt;

  &lt;pre&gt;   XmlRepository.XmlRepository.GetInstance&amp;lt;Person&amp;gt;();&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Elemente hinzufügen / aktualisieren / löschen&lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;repository.SaveOnSubmit(person);&lt;/pre&gt;

  &lt;pre&gt;repository.DeleteOnSubmit((e)=&amp;gt; e.LastName==entity.LastName);&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ich könnte jetzt natürlich alle Methoden auflisten die der Provider bzw. das IXmlRepository&amp;lt;T&amp;gt; bereitstellt, aber die Methoden sind entweder bereits von IEnumerable&amp;lt;T&amp;gt; bekannt oder so sprechend benannt, dass man nichts mehr großartig dazu sagen muss. &lt;/p&gt;

&lt;h3&gt;Beispielprojekt&lt;/h3&gt;

&lt;p&gt;Um mir einfach mal ein Bild von XmlRepository zu machen, habe ich mehrere kleine Beispielprojekte implementiert, eines, den PersonStorage &lt;a href="http://dotnet-forum.de/blogs/thorstenhans/Samples/PersonStorage.zip" target="_blank"&gt;könnt ihr euch hier downloaden und den Code anschauen&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Durch den geschickten Einsatz von Generics kann man den Code rund um XmlRepository auch fließend und sprechend halten, so habe ich zum Beispiel die Klasse &lt;strong&gt;Create&amp;lt;T&amp;gt;&lt;/strong&gt; implementiert, die einen Wrapper um das erstellen von Objekten darstellt; Funktional absolut 0 Nutzen halt einfach noch etwas Syntactic Sugar. #geek&lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;class&lt;/span&gt; Create&amp;lt;T&amp;gt;&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; T With(Func&amp;lt;T&amp;gt; with)&lt;/pre&gt;

  &lt;pre&gt;    {&lt;/pre&gt;

  &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt; with.Invoke();&lt;/pre&gt;

  &lt;pre&gt;    }&lt;/pre&gt;

  &lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;Doch warum ist XmlRepository interessant?&lt;/h3&gt;

&lt;p&gt;Nun eigentlich ist es meiner Meinung nach die spielerische Einfachheit gepaart mit wenigen aber dennoch sehr wichtige Attributen die das Repository ausmachen&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;es ist schnell&lt;/li&gt;

  &lt;li&gt;es ist einfach anzuprogrammieren&lt;/li&gt;

  &lt;li&gt;der Code bleibt lesbar&lt;/li&gt;

  &lt;li&gt;der XmlRepository Code ist lesbar!&lt;/li&gt;

  &lt;li&gt;XmlRepository ist threadsafe!&lt;/li&gt;

  &lt;li&gt;der XmlRepository Code ist getestet&lt;/li&gt;

  &lt;li&gt;XmlRepository lässt euren Code testbar! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Daher werde ich das Projekt der beiden auf jeden Fall weiterhin beobachten und nutzen. Eventuell findet sich mal in naher Zukunft ein kleines WebProjekt welches ich auf XmlRepository aufbauen kann.&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;h3&gt;Hints an die Erfinder&lt;/h3&gt;

&lt;p&gt;Ich weiss, die Version 1.1 wurde schnell mal so published, dennoch hier mal kurz ein paar Dinge die mir aufgefallen sind:&lt;/p&gt;

&lt;p&gt;Namespace und KlassenName &lt;strong&gt;XmlRepository&lt;/strong&gt; finde ich etwas unschön Abhilfe schafft aktuell &lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; XR = XmlRepository;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//...&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//...&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;this&lt;/span&gt;._repository = XR.XmlRepository.GetInstance&amp;lt;Foo&amp;gt;();&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Zwar bietet die API - dank des Expression-Tree - Parameters&amp;#160; für die Methode &lt;strong&gt;DeleteOnSubmit &lt;/strong&gt;eine variable Schnittstelle, dennoch fände ich es gut wenn es für Delete … (und auch die anderen CRUD Methoden) direkt schon eine Überladung gäbe die direkt auf die DefaultQueryProperty geht. – Oder habe ich da etwas übersehen?&lt;/p&gt;

&lt;h3&gt;Fazit&lt;/h3&gt;

&lt;p&gt;XmlRepository ist eine Idee mit potential, vielleicht nicht im Hinsicht auf den Verwirklichungsgrad von Peter und Golo, aber sicherlich kann die Assembly als Beispiel dafür dienen wie einfach und elegant man alltägliche Szenarien lösen kann. Fehlt natürlich nur noch die nächste Evolutionsstufe das JsonRepository. Eventuell mache ich mich mal daran :) Falls Peter und Golo nicht schon dran sind???!!!&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;div style="padding-bottom:0px;margin:0px;padding-left:0px;padding-right:0px;display:inline;float:none;padding-top:0px;" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:fd84a9b2-1931-412d-9b0e-351f35eecb2f" class="wlWriterSmartContent"&gt;Technorati-Markierungen: &lt;a href="http://technorati.com/tags/Lib" rel="tag"&gt;Lib&lt;/a&gt;,&lt;a href="http://technorati.com/tags/.NET" rel="tag"&gt;.NET&lt;/a&gt;,&lt;a href="http://technorati.com/tags/C%23" rel="tag"&gt;C#&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Community" rel="tag"&gt;Community&lt;/a&gt;,&lt;a href="http://technorati.com/tags/XmlRepository" rel="tag"&gt;XmlRepository&lt;/a&gt;&lt;/div&gt;&lt;div class="wlWriterHeaderFooter" style="text-align:left;margin:0px;padding:4px 4px 4px 4px;"&gt;&lt;a href="http://dotnet-kicks.de/kick/?url=http://www.dotnet-forum.de/blogs/thorstenhans/archive/2011/01/11/schnell-einfach-genial-xmlrepository.aspx"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://www.dotnet-forum.de/blogs/thorstenhans/archive/2011/01/11/schnell-einfach-genial-xmlrepository.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" alt="DotNetKicks-DE Image" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;img src="http://dotnet-forum.de/aggbug.aspx?PostID=48918" width="1" height="1"&gt;</description>
      <pubDate>Tue, 11 Jan 2011 00:03:58 Z</pubDate>
      <a10:rights type="text">Thorsten Hans</a10:rights>
      <a10:contributor>
        <a10:name>Thorsten Hans</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thorsten Hans</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://ilker.de/?p=2143</guid>
      <link>http://ilker.de/distanz-ist-widerstand</link>
      <a10:author>
        <a10:name>Ilker Cetinkaya</a10:name>
      </a10:author>
      <title>Distanz ist Widerstand</title>
      <description>Distanz ist Widerstand. Widerstand gegen Veränderung. Im richtigen Leben wie auch in der Software-Entwicklung. Und das mit dem Widerstand meine ich durchaus im wörtlich-physikalischen Sinne. Ich möchte jetzt keine Formeln ableiten, denn dazu wäre ich bei Weitem nicht im Stande. Aber so aus dem Gefühl heraus ist die Korrelation von Distanz zu Widerstand mindestens linear. [...]</description>
      <pubDate>Mon, 10 Jan 2011 22:22:31 Z</pubDate>
      <a10:rights type="text">Ilker Cetinkaya</a10:rights>
      <a10:content type="html">&lt;p&gt;Distanz ist Widerstand. Widerstand gegen Veränderung. Im richtigen Leben wie auch in der Software-Entwicklung. Und das mit dem Widerstand meine ich durchaus im wörtlich-physikalischen Sinne. Ich möchte jetzt keine Formeln ableiten, denn dazu wäre ich bei Weitem nicht im Stande. Aber so aus dem Gefühl heraus ist die Korrelation von Distanz zu Widerstand mindestens linear. In einfachen Worten: Je länger die Distanz, umso höher der Widerstand gegen Veränderung.&lt;/p&gt;
&lt;h3&gt;Veränderung ist ein Katalysator&lt;/h3&gt;
&lt;p&gt;Die Agilisten wissen was ich meine. Ohne Veränderung geht garnichts. Keine Verschlechterung, keine Verbesserung, keine Erkenntnis. Gerade deswege hört man ja auch in immer mehr Software-Unternehmen im Flur die Selbstmotivationsformel der Agilisten: &amp;#8220;Embrace Change!&amp;#8221; &lt;i class="note"&gt;(Anmerkung: &amp;#8220;Embrace Change&amp;#8221; ist mittlerweile in meinen Augen ein Nachrück-Kandidat für das &lt;a href="http://www.bizzbingo.com/"&gt;BizzBingo&lt;/a&gt;. Leider)&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Toll gesagt. Aber wie soll man denn etwas ändern, wenn man seine Kollegen, den Chef, oder den Kunden nicht in Reichweite hat? Natürlich lässt sich etwas ändern. Emails schreiben, Konzepte entwerfen, den Tischnachbarn mit &amp;#8220;neuen Ideen&amp;#8221; indoktrinieren.&lt;/p&gt;
&lt;p&gt;Ja, ein enthusiastischer Software-Entwickler würde das alles wohl tun. Doch der Wirkungsgrad seines Tuns ist eben abhängig von Distanz. Ein Beispiel: der &lt;a href="http://manifesto.softwarecraftsmanship.org/"&gt;Software-Craftsman&lt;/a&gt; von eben hat eine Idee: &lt;a href="http://de.wikipedia.org/wiki/Paarprogrammierung"&gt;Pair Programming&lt;/a&gt;. Er probiert es mit seinem Kollegen und Kumpel aus, den er nach 2-3 Sessions schon durch den Know-How-Austausch überzeugen konnte. Wäre z.B. sein Team-Lead oder Produkt-Manager &lt;i&gt;(Anmerkung: ich sag&amp;#8217; jetzt mal absichtlich nicht Product Owner)&lt;/i&gt; im gleichen Raum, dann wäre der Wirkungsgrad ein anderer als wenn der Vorschlag dem Team-Lead über die wöchentlichen Email-Reports oder Telefon-Schaltung unterbreitet wird. &lt;a href="http://ilker.de/raumliche-nahe-wird-unterschatzt"&gt;Räumliche Nähe wird leider oft unterschätzt&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Lange Rede, Kurze Wege&lt;/h3&gt;
&lt;p&gt;Bevor es jetzt für den einen oder anderen zu philosophisch oder theoriegetrieben wird: Diese methodisch-prozessgetriebene Sichtweise ist nicht alles. Widerstand gegen Veränderung gibt es auch im täglichen, ganz und gar praktischen Sinn. Ein wunderbares Beispiel ist da das Programmieren selbst.&lt;/p&gt;
&lt;p&gt;Bei der Software-Entwicklung geht es ja nicht nur um Code in &amp;#8220;Programmiersprache&amp;#8221; produzieren. Man kodiert auch andere Dinge. Man entwickelt und designed Modelle, man dokumentiert Anforderungen, Szenarien, Ausnahmefälle und Entscheidungen. Man entwickelt Tests für Anforderung, Verifikation und Design. Das und noch einiges mehr macht man &amp;#8220;eben so nebenbei&amp;#8221;. Doch wo und wie?&lt;/p&gt;
&lt;p&gt;Was ich damit meine ist schlichtweg das Medium, die Mittel und Methoden, mit denen man Artefakte schafft. So z.B. bei Tests. Ich bin (wohl einer der wenigen) Freunde von sog. &amp;#8220;Near-Specs&amp;#8221;, also &lt;a href="http://ilker.de/unit-tests-sind-immer-dabei"&gt;Unit-Tests, die so nah wie möglich am SUT&lt;/a&gt; sind. Sei es aus physikalischer, logischer oder virtueller Sicht. Der Grund ist für mich einleuchtend: Je weniger Distanz ich zwischen Test &amp;#038; Implementierung zu überbrücken habe, umso frequentiver ändere ich auch.&lt;/p&gt;
&lt;p&gt;Das ist sowohl beim TDD als auch in der Wartung der Fall. Beim TDD ist meine Erfahrung, dass man &amp;#8220;einfach mehr refaktorisiert&amp;#8221; &amp;#8211; insbesondere die Tests selbst. Beim Revisit ist es oft so, dass man strukturelle Änderungen (z.B. Klasse aufteilen, Vererbung einführen) wesentlich zügiger und &amp;#8220;schmerzfreier&amp;#8221; durchführen kann. Aus dieser Erfahrung heraus ist für mich die Nähe der Tests ein Vorteil.&lt;/p&gt;
&lt;h3&gt;Aus den Augen, aus dem Sinn ?!?&lt;/h3&gt;
&lt;p&gt;Schlußendlich dreht sich für mich als Entwickler bei Fragen Rund um den &amp;#8220;Ort&amp;#8221; von Artefakten um das Thema der &amp;#8220;allgemeinen Erwartung&amp;#8221; und Erreichbarkeit. Ein schönes Beispiel ist die Design- und Konzeptdokumentation. Ich frage mich dann meist selbst: &lt;/p&gt;
&lt;p&gt;Wo (im Gesamtprojekt) würde ich die Dokumentation zu dem Konzept erwarten? Wo (und unter welchen Szenarien) würde die Dokumentation am meisten angewendet werden (also geändert und gelesen werden)? Wo wäre für mich ein plausibler, einfach zu erkennender Einstiegspunkt für die Dokumentation?&lt;/p&gt;
&lt;p&gt;Oft kommen bei unterschiedlichen Projekten ähnliche Antworten heraus. Eine allgemeingültige Antwort habe ich für mich jedoch nicht gefunden. Doch bei allen Antworten spielt die Minimierung der Distanz von Artefakten eine bedeutende Rolle. &lt;/p&gt;
&lt;p&gt;Grund: Distanz ist Widerstand gegen Veränderung.&lt;/p&gt;
</a10:content>
      <a10:contributor>
        <a10:name>Ilker Cetinkaya</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ilker Cetinkaya</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">6dcdb6ae-26a7-4704-ae8b-cbd278e59bdf:48901</guid>
      <link>http://dotnet-forum.de/blogs/thorstenhans/archive/2011/01/10/mission-qualit-228-tssicherung-in-sharepoint-projekten-das-gewinnspiel.aspx</link>
      <a10:author>
        <a10:name>Thorsten Hans</a10:name>
      </a10:author>
      <title>Mission Qualitätssicherung in SharePoint Projekten – Das Gewinnspiel</title>
      <description>&lt;p&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/TypeMock_11977310.jpg"&gt;&lt;img style="background-image:none;border-bottom:0px;border-left:0px;margin:0px 0px 0px 7px;padding-left:0px;padding-right:0px;display:inline;float:right;border-top:0px;border-right:0px;padding-top:0px;" title="TypeMock" border="0" alt="TypeMock" align="right" src="http://dotnet-forum.de/blogs/thorstenhans/TypeMock_thumb_6CD635CB.jpg" width="100" height="105" /&gt;&lt;/a&gt;In den letzten Posts:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/archive/2010/12/07/typemock-isolator-for-sharepoint.aspx" target="_blank"&gt;Typemock Isolator for SharePoint&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/archive/2010/12/08/mission-qualit-228-tssicherung-in-sharepoint-projekten-spcontext-faken.aspx" target="_blank"&gt;Mission Qualitätssicherung in SharePoint Projekten–SPContext faken&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/archive/2010/12/08/mission-qualit-228-tssicherung-in-sharepoint-projekten-testen-von-sharepoint-mit-typemock-part-3.aspx" target="_blank"&gt;Mission Qualitätssicherung in SharePoint Projekten – Testen von SharePoint mit Typemock Part 3&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/archive/2010/12/14/mission-qualit-228-tssicherung-in-sharepoint-projekten-testen-von-sharepoint-mit-typemock-part-iv.aspx" target="_blank"&gt;Mission Qualitätssicherung in SharePoint Projekten – Testen von SharePoint mit Typemock Part 4&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href="http://dotnet-forum.de/blogs/thorstenhans/archive/2010/12/20/mission-qualit-228-tssicherung-in-sharepoint-projekten-testen-von-sharepoint-mit-typemock-part-5.aspx" target="_blank"&gt;Mission Qualitätssicherung in SharePoint Projekten – Testen von SharePoint mit Typemock Part 5&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;habe ich über Typemock als MockFramework für SharePoint Projekte geschrieben. Damit auch Ihr Typemock in euren SharePoint 2010 und SharePoint 2007 Projekten nutzen könnt, möchte ich einige Lizenzen hier verlosen.&lt;/p&gt;  &lt;p&gt;Wie viel Lizenzen von Typemock Isolator for SharePoint verlost werden, hängt dabei ganz von euch ab. Pro 20 Teilnehmer wird 1 Typemock Isolator for SharePoint Lizenz verlost. &lt;/p&gt;  &lt;h3&gt;Was müsst ihr tun&lt;/h3&gt;  &lt;p&gt;Das Gewinnspiel wird in Form einer Blogparade realisiert. Eine Blogparade ist eine einfache Verkettung von Blogartikeln unterschiedlicher Autoren. Dies bedeutet, ihr veröffentlicht einfach auf eurem Blog / eurer Homepage einen Artikel zu meiner Artikelserie “Mission Qualitätssicherung in SharePoint Projekten” und fügt dort einen Trackback – Hyperlink – &lt;strong&gt;auf die URL dieses Artikels&lt;/strong&gt; ein. &lt;/p&gt;  &lt;p&gt;Mehr ist nicht zu tun um am Gewinnspiel teilzunehmen. Das Gewinnspiel startet ab sofort und endet am 16.02.2011 um 0:00 Uhr MEZ.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Die Verlosung selbst wird am 16.02.2011 stattfinden! &lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;font size="2"&gt;Logischerweise ist wie bei allen Gewinnspielen der Rechtsweg ausgeschlossen. Teilnehmen kann jede natürliche Person. Bei Mehrfachteilnahme wird maximal ein Gewinn pro natürliche Person vergeben. Im Rahmen des Gewinnspiels werden an Typemock folgende Daten von euch übermittelt: Name, Vorname, Emailadresse.&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font size="2"&gt;&lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font size="2"&gt;Vielen Dank, an dieser Stelle noch an Typemock, die entsprechend der Beschreibung die Lizenzen zur Verfügung stellen. &lt;/font&gt;&lt;/p&gt;  &lt;p&gt;&lt;font size="2"&gt;&lt;/font&gt;&lt;/p&gt;  &lt;div style="padding-bottom:0px;margin:0px;padding-left:0px;padding-right:0px;display:inline;float:none;padding-top:0px;" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:6d6e15eb-20ae-4818-b61f-d52e16b5a1bc" class="wlWriterSmartContent"&gt;Technorati-Markierungen: &lt;a href="http://technorati.com/tags/Typemock" rel="tag"&gt;Typemock&lt;/a&gt;,&lt;a href="http://technorati.com/tags/SharePoint" rel="tag"&gt;SharePoint&lt;/a&gt;,&lt;a href="http://technorati.com/tags/Gewinnspiel" rel="tag"&gt;Gewinnspiel&lt;/a&gt;&lt;/div&gt;&lt;div class="wlWriterHeaderFooter" style="text-align:left;margin:0px;padding:4px 4px 4px 4px;"&gt;&lt;a href="http://dotnet-kicks.de/kick/?url=http://www.dotnet-forum.de/blogs/thorstenhans/archive/2011/01/10/mission-qualit-228-tssicherung-in-sharepoint-projekten-das-gewinnspiel.aspx"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://www.dotnet-forum.de/blogs/thorstenhans/archive/2011/01/10/mission-qualit-228-tssicherung-in-sharepoint-projekten-das-gewinnspiel.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" alt="DotNetKicks-DE Image" border="0" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;img src="http://dotnet-forum.de/aggbug.aspx?PostID=48901" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 20:21:04 Z</pubDate>
      <a10:rights type="text">Thorsten Hans</a10:rights>
      <a10:contributor>
        <a10:name>Thorsten Hans</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thorsten Hans</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=e3c1fa7b-55a7-4682-a494-1c8fbe10aa88</guid>
      <link>http://www.aboutdotnet.de/post/Extension-stoppt-VS2010-beim-ersten-Build-Fehler.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Extension stoppt VS2010 beim ersten Build-Fehler</title>
      <description>&lt;img src='/image.axd?picture=2011%5c1%5cstopbuildonfirsterror_0068x0054.jpg' alt='VS-Extension StopOnFirstBuildError' title='VS-Extension StopOnFirstBuildError' align='left' hspace='15'&gt;Gerade bei umfangreicheren Solutions mit vielen Einzelprojekten ist es manchmal wenig sinnvoll, den Build-Prozess einer Solution vollständig durchlaufen zu lassen, wenn der Compiler bereits in einem der Teilprojekte auf einen Fehler gestoßen ist. Die VS2010-Extension »StopOnFirstBuildError« von Einar Egilsson lässt daher den Prozess vorzeitig abbrechen.</description>
      <pubDate>Mon, 10 Jan 2011 18:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.robertsoft.de/2011/01/10/windows-embedded-handheld-6-5-vorgestellt/</guid>
      <link>http://blog.robertsoft.de/2011/01/10/windows-embedded-handheld-6-5-vorgestellt/</link>
      <a10:author>
        <a10:name>Robert Wachtel</a10:name>
      </a10:author>
      <title>Windows Embedded Handheld 6.5 vorgestellt</title>
      <description>Heute hat Microsoft offiziell das auf Windows Mobile 6.5 basierende Windows Embedded Handheld 6.5 vorgestellt. Der Fokus hierbei liegt eindeutig auf f&amp;#252;r den industriellen Einsatz bestimmte Ger&amp;#228;te und der Investitionssicherheit – so lassen sich auf der einen Seite f&amp;#252;r Windows Mobile entwickelte Anwendungen weiterhin nutzen als auch im Gegensatz zu Windows Phone 7 Anwendungen mit [...]</description>
      <pubDate>Mon, 10 Jan 2011 17:08:41 Z</pubDate>
      <a10:rights type="text">Robert Wachtel</a10:rights>
      <a10:contributor>
        <a10:name>Robert Wachtel</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Wachtel</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=e58609fe-aa7e-4d01-8bb5-e223a8475487</guid>
      <link>http://www.aboutdotnet.de/post/netTiers-2-3-1.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>.netTiers 2.3.1</title>
      <description>&lt;img src='/image.axd?picture=2011%5c1%5cnettiers231_0068x0054.jpg' alt='.netTiers 2.3.1' title='.netTiers 2.3.1' align='left' hspace='15'&gt;Das Maintenance Release 2.3.1 des Anwendungsframeworks ».netTiers« bringt rund 60 Bugfixes und Verbesserungen gegenüber dem vorangegangenen Release 2.3.0.</description>
      <pubDate>Mon, 10 Jan 2011 17:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.codefest.at/post.aspx?id=b9d137ab-eacd-4060-8cd1-d81c27a846f8</guid>
      <link>http://feedproxy.google.com/~r/MsdnAustria/~3/rfHLnoc5CSY/post.aspx</link>
      <a10:author>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:author>
      <title>VPN in die Wolke - Azure Connect (3)– Azure Role Endpunkte hinzufügen</title>
      <description>&lt;p&gt;&lt;a href="http://www.codefest.at/post/2011/01/06/azure-connect-1.aspx"&gt;Teil 1- Theorie zu Azure Connect&lt;/a&gt;     &lt;br /&gt;&lt;a href="http://www.codefest.at/post/2011/01/10/azure-connect-2.aspx"&gt;Teil 2 - Azure Connect - Lokale Endpunkte&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Im dritten Teil geht es um die Anbindung von Azure Roles an das Azure Connect VPN.&lt;/p&gt;  &lt;p&gt;Dazu müssen Sie im Azure Management Portal (&lt;a href="http://windows.azure.com/"&gt;http://windows.azure.com/&lt;/a&gt;) unter “Virtual Network” den Menüpunkt “Get Activation Token” wählen.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.codefest.at/image.axd?picture=image_232.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_197.png" width="244" height="111" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Kopieren Sie den Token in die Zwischenablage.&lt;/p&gt;  &lt;p&gt;Stellen Sie sicher, dass Sie das &lt;a href="http://bit.ly/azuresdk" target="_blank"&gt;Azure SDK 1.3 installiert haben&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Öffnen Sie ein bestehendes Azure Projekt in Visual Studio und fügen Sie folgenden Code in die &lt;em&gt;ServiceConfiguration.csdef &lt;/em&gt;Datei ein:&lt;/p&gt;  &lt;pre&gt;&amp;lt;Imports&amp;gt;
   &amp;lt;Import moduleName=&amp;quot;Connect&amp;quot; /&amp;gt;
&amp;lt;/Imports&amp;gt;&lt;/pre&gt;

&lt;p&gt;Und in die &lt;em&gt;ServiceConfiguration.cscfg&lt;/em&gt; folgenden Code mit dem Token aus der Zwischenablage&lt;/p&gt;

&lt;pre&gt;&amp;lt;Setting name=&amp;quot;Microsoft.WindowsAzure.Plugins.Connect.ActivationToken&amp;quot; value=&amp;quot;your_ activation_token_guid&amp;quot; /&amp;gt;&lt;/pre&gt;

&lt;p&gt;Nun publizieren Sie die Azure Rolle – fertig!&lt;/p&gt;

&lt;p&gt;Wie in Teil 2 beschrieben, müssen Sie die Rolle nun noch einer Verbindungsgruppe zuweisen. &lt;/p&gt;

&lt;h2&gt;Installation von Azure Connect&lt;/h2&gt;

&lt;table border="0" cellspacing="0" cellpadding="2" width="400"&gt;&lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;Endpunkt&lt;/td&gt;

      &lt;td valign="top" width="200"&gt;Methode&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;Web Role &amp;amp; Worker Role&lt;/td&gt;

      &lt;td valign="top" width="200"&gt;Import Section &amp;amp; Token&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;VM Role&lt;/td&gt;

      &lt;td valign="top" width="200"&gt;Azure Connect Agent im Image installieren&lt;/td&gt;
    &lt;/tr&gt;

    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;Lokale Maschine&lt;/td&gt;

      &lt;td valign="top" width="200"&gt;Azure Connect Agent lokal installieren&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/gg433122.aspx" target="_blank"&gt;Weitere Details zu Windows Azure Connect in der MSDN Library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.knor.net/blog/"&gt;&lt;img title="KnomImage" border="0" alt="KnomImage" src="http://www.codefest.at/image.axd?picture=image_165.png" width="60" height="76" /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="http://www.knor.net/blog/"&gt;&lt;em&gt;knom&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 16:40:12 +0100</pubDate>
      <a10:rights type="text">msdn Austria [MS]</a10:rights>
      <a10:contributor>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">msdn Austria [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8163282460106371512.post-984399574626134696</guid>
      <link>http://blog.uniquesoftware.de/2011/01/datenbankrollen-eines-benutzers.html</link>
      <a10:author>
        <a10:name>Martin Hey</a10:name>
      </a10:author>
      <title>Datenbankrollen eines Benutzers ermitteln</title>
      <description>&lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;Möchte man ermitteln, welchen Datenbankrollen ein Benutzer angehört, so ist es anfänglich gar nicht so kompliziert. Die relevante Systemsicht ist recht schnell gefunden: sys.database_role_members.&lt;br /&gt;&lt;div style="border: 1px solid black; overflow: auto; width: 99%; background-color: rgb(230, 232, 250);"&gt;&lt;pre style="font-family: consolas;"&gt;SELECT USER_NAME(role_principal_id)&lt;br /&gt;FROM sys.database_role_members&lt;br /&gt;WHERE member_principal_id = USER_ID('MyUser')&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Hierbei gibt es aber zwei Probleme: Zunächst ist die Rolle public nicht enthalten und die Rekursion wird nicht aufgelöst, können doch Datenbankrollen andere Datenbankrollen enthalten. Eine Lösung dafür ist die Verwendung von Common Table Expressions, um die Rekursion aufzulösen. Ausformuliert sieht das in etwa wie folgt aus:&lt;br /&gt;&lt;div style="border: 1px solid black; overflow: auto; width: 99%; background-color: rgb(230, 232, 250);"&gt;&lt;pre style="font-family: consolas;"&gt;DECLARE @username sysname;&lt;br /&gt;SET @username = 'MyUser';&lt;br /&gt;&lt;br /&gt;WITH CTE_Roles (role_principal_id)&lt;br /&gt;AS&lt;br /&gt;(&lt;br /&gt;SELECT role_principal_id&lt;br /&gt;FROM sys.database_role_members&lt;br /&gt;WHERE member_principal_id = USER_ID(@username)&lt;br /&gt;UNION ALL&lt;br /&gt;SELECT dbrm.role_principal_id&lt;br /&gt;FROM sys.database_role_members dbrm&lt;br /&gt;INNER JOIN CTE_Roles CR&lt;br /&gt;  ON dbrm.member_principal_id = CR.role_principal_id&lt;br /&gt;)&lt;br /&gt;SELECT USER_NAME(role_principal_id) RoleName&lt;br /&gt;FROM CTE_Roles&lt;br /&gt;UNION ALL&lt;br /&gt;SELECT 'public'&lt;br /&gt;FROM sys.sysusers&lt;br /&gt;WHERE uid = USER_ID(@username)&lt;br /&gt;ORDER BY RoleName;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Aufgelistet werden alle zugeordneten Datenbankrollen unter Beachtung der Schachtelungsmöglichkeit von Rollen sowie die Rolle public.&lt;br /&gt;&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8163282460106371512-984399574626134696?l=blog.uniquesoftware.de' alt='' /&gt;&lt;/div&gt;</description>
      <pubDate>Mon, 10 Jan 2011 16:10:00 +0100</pubDate>
      <a10:link rel="replies" type="application/atom+xml" title="Kommentare zum Post" href="http://blog.uniquesoftware.de/feeds/984399574626134696/comments/default" />
      <a10:link rel="replies" type="text/html" title="0 Kommentare" href="https://www.blogger.com/comment.g?blogID=8163282460106371512&amp;postID=984399574626134696" />
      <a10:link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8163282460106371512/posts/default/984399574626134696" />
      <a10:link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8163282460106371512/posts/default/984399574626134696" />
      <a10:updated>2011-01-10T16:10:00+01:00</a10:updated>
      <a10:rights type="text">Martin Hey</a10:rights>
      <a10:contributor>
        <a10:name>Martin Hey</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Hey</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=6365dac1-7502-43b3-a94a-c46db430419b</guid>
      <link>http://www.aboutdotnet.de/post/Wichtiges-Sicherheitsupdate-mit-Mono-282.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Wichtiges Sicherheitsupdate mit Mono 2.8.2</title>
      <description>Mit dem Release 2.8.2 werden im .NET-Klon »Mono« kritische Sicherheitslücken geschlossen, die ASP.NET- und Moonlight/Silverlight-Anwendungen betreffen.</description>
      <pubDate>Mon, 10 Jan 2011 16:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://devtyr.norberteder.com/post.aspx?id=c1903f91-35c6-42d1-932c-2b922d4be90b</guid>
      <link>http://devtyr.norberteder.com/post/PC-Tastatur-fur-Windows-Phone-7-Emulator-verwenden.aspx</link>
      <a10:author>
        <a10:name>Norbert Eder</a10:name>
      </a10:author>
      <title>PC-Tastatur für Windows Phone 7 Emulator verwenden</title>
      <description>&lt;p&gt;Ohne Unterstützung der PC-Tastatur kann die testweise Dateneingabe im Windows Phone 7 Emulator schon eine nervenaufreibende Sache sein. Besonders &lt;strike&gt;schlecht&lt;/strike&gt;gut dokumentiert sind hier die einzelnen Möglichkeiten. Nachfolgend eine Übersicht der wichtigsten Tasten und deren Auswirkung auf den Emulator:&lt;/p&gt;  &lt;table border="0" cellspacing="1" cellpadding="2" width="400"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign="top" width="111"&gt;&lt;strong&gt;&lt;font size="3"&gt;PC&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;        &lt;td valign="top" width="289"&gt;&lt;strong&gt;&lt;font size="3"&gt;Emulator&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F1&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Zurück&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F2&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Start&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F3&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Suche&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F6&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Kamera (halb gedrückt)&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F7&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Kamera (voll gedrückt)&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F9&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Lautstärke rauf&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;F10&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Lautstärke runter&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;&lt;strong&gt;Bild auf&lt;/strong&gt;&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Keyboard aktivieren&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;&lt;strong&gt;Bild ab&lt;/strong&gt;&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Keyboard deaktivieren&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign="top" width="111"&gt;STRG (rechts)&lt;/td&gt;        &lt;td valign="top" width="289"&gt;Symbole (Zahlen etc.)&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Damit lässt es sich auch bei der Dateneingabe schon wesentlich besser arbeiten.&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 15:00:00 +0100</pubDate>
      <a10:rights type="text">Norbert Eder</a10:rights>
      <a10:contributor>
        <a10:name>Norbert Eder</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Norbert Eder</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=238e241c-aa82-4983-8e99-29086edfd13c</guid>
      <link>http://www.aboutdotnet.de/post/Neuer-Blog-Aggregator-SQLServerBlogs-de.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Neuer Blog-Aggregator: SQLServerBlogs.de</title>
      <description>&lt;img src='/image.axd?picture=2011%5c1%5csqlserverblogs_0068x0054.jpg' alt='SQLServerBlogs.de' title='SQLServerBlogs.de' align='left' hspace='15'&gt;Als kleines Weihnachtsgeschenk an die deutschsprachige SQL Server-Community hat Constantin Klein, MVP für SQL Server, das Blog-Aggregator-Portal »SQLServerBlogs« ins Leben gerufen. Dort werden Artikel von Blogs der deutschsprachigen SQL Server-Szene zusammengefasst.</description>
      <pubDate>Mon, 10 Jan 2011 15:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://condeso.wordpress.com/?p=41</guid>
      <link>http://condeso.wordpress.com/2011/01/10/javascript-alert-in-sharepoint-2007/</link>
      <a10:author>
        <a10:name>Dominik Heine</a10:name>
      </a10:author>
      <title>Javascript Alert in Sharepoint 2007</title>
      <description>Im Rahmen einer Custom Action, welche nicht nur erfolgreich verlaufen kann, sondern auch fehlschlagen kann, wegen ungültiger Nutzereingaben, war es notwendig, den Nutzer über dieses Fehlschlagen zu informieren. Um dies zu realisieren und dem Nutzer ein möglichst ansprechendes und unübersehbares &amp;#8230; &lt;a href="http://condeso.wordpress.com/2011/01/10/javascript-alert-in-sharepoint-2007/"&gt;Weiterlesen &lt;span class="meta-nav"&gt;&amp;#8594;&lt;/span&gt;&lt;/a&gt;&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=41&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</description>
      <pubDate>Mon, 10 Jan 2011 14:56:00 Z</pubDate>
      <a10:rights type="text">Dominik Heine</a10:rights>
      <a10:content type="html">&lt;p&gt;Im Rahmen einer Custom Action, welche nicht nur erfolgreich verlaufen kann, sondern auch fehlschlagen kann, wegen ungültiger Nutzereingaben, war es notwendig, den Nutzer über dieses Fehlschlagen zu informieren. Um dies zu realisieren und dem Nutzer ein möglichst ansprechendes und unübersehbares Feedback zu geben, wurde auf die Javascript Funktion Alert zurückgegriffen.&lt;/p&gt;
&lt;p&gt;Auf der Seite des Sharepoints musste dieses Script nun an geeigneter Stelle integriert werden. Die oben genannte Custom Action wird durch einen eigenen IHttpHandler realisiert und in der ProcessRequest(HttpContext context) Methode wird das Verhalten der Custom Action beschrieben.&lt;/p&gt;
&lt;p&gt;Sollte nun der Nutzer etwas gemacht haben, was nicht erwünscht war. So findet sich in der Ablaufroutine in ProcessRequest (HttpContext context) folgender Code.&lt;/p&gt;
&lt;pre class="brush: csharp;"&gt;
HttpResponse response = context.Response;
response.Clear();
string message = &amp;quot;Ihre Fehlerbenachrichtigung&amp;quot;;
response.Write(&amp;quot;&amp;lt;script language=\&amp;quot;javascript\&amp;quot;&amp;gt;alert(\&amp;quot;&amp;quot;+message+&amp;quot;\&amp;quot;); location=\&amp;quot;&amp;quot;+SPContext.Current.Web.Url+&amp;quot;\&amp;quot;&amp;lt;script&amp;gt;&amp;quot;);
context.Response.End();
&lt;/pre&gt;
&lt;p&gt;Diese kurze Codesegment verwendet die Response des aktuellen HttpContextes und löscht sie zunächst. Anschließend wird eine neue Response zusammengesetzt. Diese besteht aus einem kurzen Javascript, welches zunächst einen Alert auslöst mit einer eigenen Message. Anschließend, nachdem der Nutzer auf den OK Button der Message geklickt hat, wird er auf die in Location angegebene Site weitergeleitet.&lt;/p&gt;
&lt;p&gt;Somit kann man sehr einfach einen Pop-Up Notification für den Nutzer generieren, falls dieser über unübliches Verhalten informiert werden soll.&lt;/p&gt;
&lt;br /&gt;  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gofacebook/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/facebook/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gotwitter/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/twitter/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/condeso.wordpress.com/41/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/condeso.wordpress.com/41/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=condeso.wordpress.com&amp;amp;blog=18387041&amp;amp;post=41&amp;amp;subd=condeso&amp;amp;ref=&amp;amp;feed=1" width="1" height="1" /&gt;</a10:content>
      <a10:contributor>
        <a10:name>Dominik Heine</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dominik Heine</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.codefest.at/post.aspx?id=1b44913e-3faf-42ac-96d3-2d683166922d</guid>
      <link>http://feedproxy.google.com/~r/MsdnAustria/~3/Az_UqIAGySc/post.aspx</link>
      <a10:author>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:author>
      <title>VPN in die Wolke - Azure Connect (2)– Lokale Endpunkte hinzufügen</title>
      <description>&lt;p&gt;&lt;a href="http://www.codefest.at/post/2011/01/06/azure-connect-1.aspx" target="_blank"&gt;Teil 1- Theorie zu Azure Connect&lt;/a&gt;    &lt;br /&gt;&lt;a href="http://www.codefest.at/post/2011/01/10/azure-connect-3.aspx" target="_blank"&gt;Teil 3 - Azure Connect - Azure Role Endpunkte&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Wie kann man nun Azure Connect umsetzen? Im zweiten Teil der Serie erfahren Sie, wie Sie ihre lokalen Rechner in das Connect VPN hinzufügen können.&lt;/p&gt;  &lt;p&gt;Azure Connect ist derzeit noch in Entwicklung. Sie können sich aber für die kostenlose Community Technology Preview registrieren, um Azure Connect auszuprobieren (im Teil 1 wird erklärt wie).&lt;/p&gt;  &lt;h2&gt;&lt;/h2&gt;  &lt;h2&gt;Das Management Portal&lt;/h2&gt;  &lt;p&gt;Nach erfolgreicher Registrierung finden Sie unter im Azure Management Portal unter &lt;a href="http://windows.azure.com"&gt;http://windows.azure.com&lt;/a&gt; links den neuen Punkt “Virtual Network”. Wenn Sie nun ihren Account auswählen, müssen Sie einmalig Connect für den Account aktivieren.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.codefest.at/image.axd?picture=image_226.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_191.png" width="216" height="244" /&gt;&lt;/a&gt;&amp;#160;&amp;#160;&amp;#160; &lt;a href="http://www.codefest.at/image.axd?picture=image_227.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_192.png" width="266" height="244" /&gt;&lt;/a&gt;&lt;a href="http://www.codefest.at/image.axd?picture=image_228.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_193.png" width="244" height="104" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;Installation des Azure Connect Agents&lt;/h2&gt;  &lt;p&gt;Um eine lokale Maschine in das Azure Connect Netzwerk hinzuzufügen, installieren Sie die “Local Enpoint” Software – den Azure Connect Agent über den Menüpunkt. Um den Client weiterzugeben, kopieren Sie den Link auf den Download, NICHT den Download selbst!&lt;/p&gt;  &lt;p&gt;Nach der Installation erscheint das Symbol des Azure Connect Agents in der Taskleiste. Die Verbindung ist allerdings noch nicht funktionstüchtig, da der Endpunkt noch nicht Mitglied einer Gruppe ist. Sie können aber die erfolgreiche Installation daran erkennen, dass Ihre Maschine nun unter “Activated Endpoints” im Management Portal aufscheint! (wenn nicht warten Sie etwas, oder drücken Sie “Refresh” am Taskleisten-Icon des Agents).&lt;/p&gt;  &lt;h2&gt;Gruppen anlegen und konfigurieren&lt;/h2&gt;  &lt;p&gt;Über den Menüpunkt “Create Group” können Sie nun eine Verbindungsgruppe anlegen. Jede Gruppe hat einen Namen, sowie eine Liste lokaler und Azure Endpunkte, die Mitglied der Verbindungsgruppe sind.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.codefest.at/image.axd?picture=image_229.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_194.png" width="343" height="264" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Azure-Rollen Endpunkte können sich immer zu anderen Rollen, sowie zu allen lokalen Rechnern einer Gruppe verbinden. Anders ist das bei lokalen Endpunkten. Diese können sich standardmäßig nur zu den Azure Rollen verbinden. Wollen Sie Verbindungen der lokalen Rechner einer Gruppe &lt;em&gt;untereinander&lt;/em&gt; erlauben, so müssen Sie den Punkt &lt;em&gt;“Interconnected – Allow connections between endpoints”&lt;/em&gt; der Gruppe aktivieren.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Hinweis:&lt;/em&gt;&lt;/strong&gt; Wenn Sie &lt;em&gt;Interconnected &lt;/em&gt;aktivieren, können Sie Azure Connect als VPN-Server für ihre eigenen Maschinen verwenden – Sie brauchen dazu nicht einmal Azure Rollen hinzuzufügen. (so mache ich das derzeit mit meinem Laptop, Media Center, Home PC, usw.)&lt;/p&gt;  &lt;p&gt;Übrigens: Gruppen können auch ineinander verschachtelt sein, um aufwendigere Konfigurationen zu realisieren.&lt;/p&gt;  &lt;h2&gt;Azure Connect testen&lt;/h2&gt;  &lt;p&gt;Wenn Sie nun zwei ihrer lokalen Maschinen in Azure Connect hinzugefügt haben, können Sie die Verbindung der Maschinen auf IP-Ebene überprüfen: &lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.codefest.at/image.axd?picture=image_230.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_195.png" width="244" height="105" /&gt;&lt;/a&gt;&amp;#160;&lt;a href="http://www.codefest.at/image.axd?picture=image_231.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.codefest.at/image.axd?picture=image_thumb_196.png" width="244" height="185" /&gt;&lt;/a&gt;&amp;#160; &lt;/p&gt;      &lt;p&gt;Im Management Portal sehen Sie rechts in den Eigenschaften eines Endpunktes die IPv6 Adresse der Maschine. Damit können Sie nun die Verbindung z.B. über Remote Desktop Connection oder Dateifreigaben überprüfen. Übrigens: Namensauflösung des Rechnernamens funktioniert ebenfalls!&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.knor.net/blog/"&gt;&lt;img title="KnomImage" border="0" alt="KnomImage" src="http://www.codefest.at/image.axd?picture=image_165.png" width="60" height="76" /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="http://www.knor.net/blog/"&gt;&lt;em&gt;knom&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 14:47:12 +0100</pubDate>
      <a10:rights type="text">msdn Austria [MS]</a10:rights>
      <a10:contributor>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">msdn Austria [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:10113698</guid>
      <link>http://blogs.msdn.com/b/jensha/archive/2011/01/10/wer-braucht-keine-code-samples.aspx</link>
      <a10:author>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:author>
      <title>Wer braucht keine Code Samples?</title>
      <description>&lt;p&gt;&lt;font size="2" face="Tahoma"&gt;Code-Beispiele sind für mich meist mehr wert als eine ausführliche Dokumentation. Nichts gegen Dokumentationen. Im Gegenteil. Wenn diese gut und aussagekräftig sind und natürlich Code Samples enthalten. Leider sind die kleinen Snippets oftmals viel zu kurz und aus dem Zusammenhang gerissen. Dem kann man jetzt etwas entgegen stellen. Für alle, die es noch nicht gesehen haben, Microsoft hat einen &lt;a href="http://1code.codeplex.com/wikipage?title=All-In-One%20Code%20Framework%20Sample%20Catalog"&gt;All-In-One Code Framework Sample Catalog&lt;/a&gt; veröffentlicht mit folgenden Inhalten:&lt;/font&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=ASP.NET"&gt;&lt;font size="2" face="Tahoma"&gt;ASP.NET Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Silverlight"&gt;&lt;font size="2" face="Tahoma"&gt;Silverlight Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Azure"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Azure Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WPF"&gt;&lt;font size="2" face="Tahoma"&gt;WPF Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WinForms"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Forms Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Win7"&gt;&lt;font size="2" face="Tahoma"&gt;Windows 7 Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Data"&gt;&lt;font size="2" face="Tahoma"&gt;Data Platform Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Office"&gt;&lt;font size="2" face="Tahoma"&gt;Office Development Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WF"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Workflow Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Library"&gt;&lt;font size="2" face="Tahoma"&gt;Interop and Fusion Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Winbase"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Base and .NET General Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WindowsUI"&gt;&lt;font size="2" face="Tahoma"&gt;Windows UI Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Security"&gt;&lt;font size="2" face="Tahoma"&gt;Security Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WinShell"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Shell Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=XML"&gt;&lt;font size="2" face="Tahoma"&gt;XML Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=COM"&gt;&lt;font size="2" face="Tahoma"&gt;COM Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=IRPC"&gt;&lt;font size="2" face="Tahoma"&gt;IPC and RPC Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=Diagnostics"&gt;&lt;font size="2" face="Tahoma"&gt;Diagnostics Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=VSX"&gt;&lt;font size="2" face="Tahoma"&gt;Visual Studio Extensibility Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=FileSys"&gt;&lt;font size="2" face="Tahoma"&gt;File System Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=IIS"&gt;&lt;font size="2" face="Tahoma"&gt;IIS Code Samples&lt;/font&gt;&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href="http://1code.codeplex.com/wikipage?title=WinService"&gt;&lt;font size="2" face="Tahoma"&gt;Windows Service Code Samples&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=10113698" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 14:40:23 Z</pubDate>
      <a10:rights type="text">Jens Häupel [MS]</a10:rights>
      <a10:contributor>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jens Häupel [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:10113696</guid>
      <link>http://blogs.msdn.com/b/swiss_dpe_team/archive/2011/01/10/wie-man-windows-phone-7-applikationen-effizienter-laufen-l-228-sst.aspx</link>
      <a10:author>
        <a10:name>Swiss DPE Team [MS]</a10:name>
      </a10:author>
      <title>Wie man Windows Phone 7 Applikationen effizienter laufen lässt</title>
      <description>&lt;p&gt;Mobiltelefone sollten einem möglichst schnell die gewünschten Informationen liefern. Benutzer verzeihen Warte-/Verarbeitungszeiten von Apps auf Smartphones viel weniger als von Desktop-Applikationen. Falls das Telefon für zwei Sekunden nicht reagiert, wird sofort angenommen, dass die App abgestürzt ist oder fehlerhaft läuft. Es gibt zwei Möglichkeiten dem entgegenzukommen:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;1) Man verringert die Verarbeitungszeit durch effizienteren Code.&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;p&gt;2) Man verringert die wahrgenommene Wartezeit.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Bei der Einreichung von Apps im Windows Phone 7 Marketplace ist es sogar eine zentrale Anforderung, dass die App den Benutzer nie warten lässt. In dem englischsprachigen Artikel &lt;a href="http://www.codeproject.com/KB/showcase/WP7-Performance.aspx"&gt;„Performance of Windows Phone 7 Applications“&lt;/a&gt; auf The Code Project wird ausführlich an Beispielen erläutert wie man seine Windows Phone 7 Applikation mittels oben genannten Punkten effizienter entwickelt. &lt;/p&gt;&lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=10113696" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 14:37:24 Z</pubDate>
      <a10:rights type="text">Swiss DPE Team [MS]</a10:rights>
      <a10:contributor>
        <a10:name>Swiss DPE Team [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Swiss DPE Team [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://www.csharp.at/blog/PermaLink,guid,d8473e40-8c4c-45ca-97c2-06e0efac2a97.aspx</guid>
      <link>http://www.csharp.at/blog/PermaLink,guid,d8473e40-8c4c-45ca-97c2-06e0efac2a97.aspx</link>
      <a10:author>
        <a10:name>Klaus Aschenbrenner</a10:name>
      </a10:author>
      <title>How SQL Server stores indexes on variable length columns</title>
      <description>&lt;p&gt;
In the last months I had done a lot of performance tuning workshops, and there is
almost the same question: How SQL Server stores indexes on variable length columns?
Therefore I thought this would be a great topic for a weblog posting. To examine the
concrete storage details of an index defined on a variable length column, I have created
the following table and populated it with 80.000 records:
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Create a new table&lt;br&gt;
CREATE TABLE Customers&lt;br&gt;
(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; CustomerName VARCHAR(255) NOT NULL PRIMARY KEY,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; Filler CHAR(138) NOT NULL&lt;br&gt;
)&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;&lt;font size="2" face="Courier New"&gt;-- Insert 80.000 records&lt;br&gt;
DECLARE @i INT = 1&lt;br&gt;
WHILE (@i &amp;lt;= 80000)&lt;br&gt;
BEGIN&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; INSERT INTO Customers VALUES&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; (&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'CustomerName' + CAST(@i AS VARCHAR),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'Filler' + CAST(@i AS VARCHAR)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; )&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; SET @i += 1&lt;br&gt;
END&lt;br&gt;
GO&lt;/font&gt;&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
As you can see I have created the PRIMARY KEY constraint on a VARCHAR(255) column,
which is enforced by a UNIQUE CLUSTERED INDEX by SQL Server. In the next step I have
retrieved some physical information about the created clustered index by using the
DMF sys.dm_db_index_physical_stats:
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Retrieve physical information about the
clustered index&lt;br&gt;
SELECT * FROM sys.dm_db_index_physical_stats&lt;br&gt;
(&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; DB_ID('VariableClusteredKeyStructure'),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; OBJECT_ID('Customers'),&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; NULL,&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; 'DETAILED'&lt;br&gt;
)&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
When you look into the output, you can see that the column &lt;font face="Courier New"&gt;&lt;strong&gt;min_record_size_in_bytes&lt;/strong&gt;&lt;/font&gt; show
you a value of 7 and the column &lt;font face="Courier New"&gt;max_record_size_in_bytes&lt;/font&gt; shown
you the value 28 in the index page. This leads us to the conclusion that the clustered
keys are stored as variable length columns inside an index record. So let’s examine
an index record on an index page. I’ve used the DBCC IND command to retrieve all pages
for our clustered index and stored that output in a little helper table.
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Create a helper table&lt;br&gt;
CREATE TABLE HelperTable&lt;br&gt;
(&lt;br&gt;
&amp;nbsp; PageFID TINYINT, 
&lt;br&gt;
&amp;nbsp; PagePID INT,&amp;nbsp;&amp;nbsp; 
&lt;br&gt;
&amp;nbsp; IAMFID TINYINT, 
&lt;br&gt;
&amp;nbsp; IAMPID INT, 
&lt;br&gt;
&amp;nbsp; ObjectID INT,&lt;br&gt;
&amp;nbsp; IndexID TINYINT,&lt;br&gt;
&amp;nbsp; PartitionNumber TINYINT,&lt;br&gt;
&amp;nbsp; PartitionID BIGINT,&lt;br&gt;
&amp;nbsp; iam_chain_type VARCHAR(30),&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;br&gt;
&amp;nbsp; PageType TINYINT, 
&lt;br&gt;
&amp;nbsp; IndexLevel TINYINT,&lt;br&gt;
&amp;nbsp; NextPageFID TINYINT,&lt;br&gt;
&amp;nbsp; NextPagePID INT,&lt;br&gt;
&amp;nbsp; PrevPageFID INT,&lt;br&gt;
&amp;nbsp; PrevPagePID INT, 
&lt;br&gt;
&amp;nbsp; PRIMARY KEY (PageFID, PagePID)&lt;br&gt;
)&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Write everything in a table for further
analysis&lt;br&gt;
INSERT INTO HelperTable EXEC('DBCC IND(VariableClusteredKeyStructure, Customers, 1)')&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Retrieve the root index page (1 page)&lt;br&gt;
SELECT * FROM HelperTable&lt;br&gt;
WHERE IndexLevel = 2&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
In my case SQL Server stored the index root page on the page id 458, which I have
dumped out through the &lt;font face="Courier New"&gt;DBCC PAGE&lt;/font&gt; command (after enabling
the trace-flag 3604 to get the DBCC PAGE output):
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;DBCC TRACEON (3604)&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;-- Dump out the root index page&lt;br&gt;
DBCC PAGE(VariableClusteredKeyStructure, 1, 458, 1)&lt;br&gt;
GO&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
Each slot in the output represents one index record, like:
&lt;/p&gt;
&lt;p&gt;
&lt;font size="2" face="Courier New"&gt;&lt;strong&gt;26 95020000 0100 0100 1b00 43757374 6f6d6572
4e616d65 31333533&lt;/strong&gt;&lt;/font&gt;
&lt;/p&gt;
&lt;p&gt;
Let’s examine those hex values.
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
26: The first byte represents status bits. 
&lt;li&gt;
95020000: The next 4 bytes are the child-page-id to which this index record points 
&lt;li&gt;
0100: The next 2 bytes are the child-file-id to which this index record points 
&lt;li&gt;
0100: The next 2 bytes are the number of variable length columns 
&lt;li&gt;
1b00: For each variable length column SQL Server stores a 2 byte entry which points
to the offset at which the variable length column ends – it’s the same as when you
store variable length columns on a regular data page. In this case we have one variable
length column, therefore SQL Server has to store one 2 byte offset – byte offset 27
in this case. This means that the next bytes until the byte offset 27 are part of
our variable length column – the clustered key. 
&lt;li&gt;
43757374 6f6d6572 4e616d65 31333533: The hex value for our clustered key – the column
CustomerName&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
As you can see from this explanation SQL Server stores variable length index columns
in the same format as regular variable length columns on data pages. But you have
to be aware that there is a slight overhead with this, because you need 2 additional
bytes for storing the count of variable length columns and for each variable length
column you need 2 bytes in the variable column offset array. Keep this in mind when
you are designing your indexes and when you calculate how many index records fits
onto one index page. You can download the whole script from &lt;a href="http://www.csharp.at/Downloads/VariableClusteredKeyStructure.zip" target="_blank"&gt;here&lt;/a&gt; and
play around with it.
&lt;/p&gt;
&lt;p&gt;
-Klaus
&lt;/p&gt;
&lt;img width="0" height="0" src="http://www.csharp.at/blog/aggbug.ashx?id=d8473e40-8c4c-45ca-97c2-06e0efac2a97" /&gt;</description>
      <pubDate>Mon, 10 Jan 2011 14:18:03 Z</pubDate>
      <a10:rights type="text">Klaus Aschenbrenner</a10:rights>
      <a10:contributor>
        <a10:name>Klaus Aschenbrenner</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Klaus Aschenbrenner</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.aboutdotnet.de/post.aspx?id=f45cf371-bb9b-4ff7-aae0-7da2a9633e2a</guid>
      <link>http://www.aboutdotnet.de/post/Extended-WPF-Toolkit-1-3-0.aspx</link>
      <a10:author>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:author>
      <title>Extended WPF Toolkit 1.3.0</title>
      <description>&lt;img src='/image.axd?picture=2011%5c1%5cextendedwpftoolkit130_0068x0054.jpg' alt='Extended WPF Toolkit 1.3.0' title='Extended WPF Toolkit 1.3.0' align='left' hspace='15'&gt;Mit der Version 1.3.0 des CodePlex-Projekts »Extended WPF Toolkit« von Brian Lagunas werden zwei WPF-Controls aktualisiert und es kommen drei neue Controls hinzu.</description>
      <pubDate>Mon, 10 Jan 2011 14:00:00 +0100</pubDate>
      <a10:rights type="text">Harald M. Genauck</a10:rights>
      <a10:contributor>
        <a10:name>Harald M. Genauck</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald M. Genauck</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.alexonasp.net/post.aspx?id=f256d380-a5aa-427c-b560-7a16520cd83f</guid>
      <link>http://blog.alexonasp.net/post/2011/01/10/WCF-Could-not-find-default-endpoint-element-that-references-contract-e28098ICustomerServicee28099-in-the-ServiceModel-client-configuration-section.aspx</link>
      <a10:author>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:author>
      <title>WCF: Could not find default endpoint element that references contract ‘ICustomerService’ in the ServiceModel client configuration section.</title>
      <description>&lt;P&gt;In den WCF-Beispielen von Microsoft wird der WCF-Client meißt so erstellt, dass die Service Reference im gleichen Projekt wie der Aufruf des generierten Service Clients liegt. &lt;/P&gt;  &lt;P&gt;Resultat der Aktion: der Client funktioniert problemlos.&lt;/P&gt;  &lt;P&gt;Will man hingegen den ServiceClient in eine eigene Assembly auslagern und diese in einem anderen Projekt referenzieren, erhält man unter Umständen folgende Exception:&lt;/P&gt;  &lt;P class="error"&gt;Could not find default endpoint element that references contract 'ICustomerService' in the ServiceModel client configuration section. This might be because no configuration file was found for your application, or because no endpoint element matching this contract could be found in the client element. &lt;/P&gt;  &lt;P&gt;Der Grund hierfür liegt möglichweise in der fehlenden Namespace-Defintion des Service Clients, der standardmäßig nicht mitgeneriert wird.&lt;/P&gt;  &lt;P&gt;Abhilfe schafft die Verwendung des namespace-Parameters beim Aufruf von svcutil.exe:&lt;/P&gt;  &lt;P class="commandline"&gt;svcutil.exe http://myservices/CustomerService.svc /out:CustomerServiceClient.cs    &lt;BR&gt;/n:"http://myservices,MyProject.ServiceClients" &lt;/P&gt;  &lt;P&gt;Wichtig ist, dass der WSDL/XML-Namespace (z.B. “&lt;A title="http://myservices" href="http://myservices" mce_href="http://myservices"&gt;http://myservices&lt;/A&gt;”) dem Namespace der ServiceContract-Definition (via Attribut) entspricht, da sonst der CLR-Namespace nicht generiert wird.&lt;/P&gt;&lt;DIV style="margin: 0px; padding: 4px; text-align: left;" class="wlWriterHeaderFooter"&gt;&lt;A href="http://dotnet-kicks.de/kick/?url=http://blog.alexonasp.net/post/2011/01/10/WCF-Could-not-find-default-endpoint-element-that-references-contract-e28098ICustomerServicee28099-in-the-ServiceModel-client-configuration-section.aspx" mce_href="http://dotnet-kicks.de/kick/?url=http://blog.alexonasp.net/post/2011/01/10/WCF-Could-not-find-default-endpoint-element-that-references-contract-e28098ICustomerServicee28099-in-the-ServiceModel-client-configuration-section.aspx"&gt;&lt;IMG border="0" alt="DotNetKicks-DE Image" src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://blog.alexonasp.net/post/2011/01/10/WCF-Could-not-find-default-endpoint-element-that-references-contract-e28098ICustomerServicee28099-in-the-ServiceModel-client-configuration-section.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" mce_src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://blog.alexonasp.net/post/2011/01/10/WCF-Could-not-find-default-endpoint-element-that-references-contract-e28098ICustomerServicee28099-in-the-ServiceModel-client-configuration-section.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000"&gt;&lt;/A&gt;&lt;/DIV&gt;</description>
      <pubDate>Mon, 10 Jan 2011 13:34:00 +0100</pubDate>
      <a10:rights type="text">Alexander Zeitler</a10:rights>
      <a10:contributor>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Zeitler</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.alexonasp.net/post.aspx?id=2b1f43f8-151e-46c0-ae93-af9f904caa31</guid>
      <link>http://blog.alexonasp.net/post/2011/01/10/SystemServiceModelFaultException-e2809cThe-message-could-not-be-processede2809d-beim-Aufruf-eines-WCF-Services.aspx</link>
      <a10:author>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:author>
      <title>System.ServiceModel.FaultException: “The message could not be processed” beim Aufruf eines WCF-Services</title>
      <description>&lt;P&gt;Erhält man die folgende Exception beim Aufruf eines WCF-Services:&lt;/P&gt;  &lt;P class="error"&gt;The message could not be processed. This is most likely because the action 'http://myServices/CustomerService.svc/GetAll' is incorrect or because the message contains an invalid or expired security context token or because there is a mismatch between bindings. The security context token would be invalid if the service aborted the channel due to inactivity. To prevent the service from aborting idle sessions prematurely increase the Receive timeout on the service endpoint's binding. &lt;/P&gt;  &lt;P&gt;kann dies daran liegen, dass in der EndPoint-Konfiguration des Services die bindingConfiguration nicht gesetzt ist:&lt;/P&gt;  &lt;PRE class="html" name="code"&gt;&amp;lt;endpoint 
	address="http://myservices/CustomerService.svc" 
	binding="wsHttpBinding" 
	contract="myservices.ICustomerService" 
	name="WSHttpBinding_ICustomerService" 
	bindingConfiguration="WSHttpBinding_ICustomerService"&amp;gt;&lt;/PRE&gt;&lt;DIV style="margin: 0px; padding: 4px; text-align: left;" class="wlWriterHeaderFooter"&gt;&lt;A href="http://dotnet-kicks.de/kick/?url=http://blog.alexonasp.net/post/2011/01/10/SystemServiceModelFaultException-e2809cThe-message-could-not-be-processede2809d-beim-Aufruf-eines-WCF-Services.aspx" mce_href="http://dotnet-kicks.de/kick/?url=http://blog.alexonasp.net/post/2011/01/10/SystemServiceModelFaultException-e2809cThe-message-could-not-be-processede2809d-beim-Aufruf-eines-WCF-Services.aspx"&gt;&lt;IMG border="0" alt="DotNetKicks-DE Image" src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://blog.alexonasp.net/post/2011/01/10/SystemServiceModelFaultException-e2809cThe-message-could-not-be-processede2809d-beim-Aufruf-eines-WCF-Services.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000" mce_src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http://blog.alexonasp.net/post/2011/01/10/SystemServiceModelFaultException-e2809cThe-message-could-not-be-processede2809d-beim-Aufruf-eines-WCF-Services.aspx&amp;amp;bgcolor=3169AD&amp;amp;fgcolor=FFFFFF&amp;amp;border=000000&amp;amp;cbgcolor=D4E1ED&amp;amp;cfgcolor=000000"&gt;&lt;/A&gt;&lt;/DIV&gt;</description>
      <pubDate>Mon, 10 Jan 2011 12:45:00 +0100</pubDate>
      <a10:rights type="text">Alexander Zeitler</a10:rights>
      <a10:contributor>
        <a10:name>Alexander Zeitler</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Zeitler</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:10113656</guid>
      <link>http://blogs.msdn.com/b/jensha/archive/2011/01/10/msdn-bus-mit-vortr-228-gen-on-tour.aspx</link>
      <a10:author>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:author>
      <title>MSDN Bus mit Vorträgen on Tour</title>
      <description>&lt;p&gt;&lt;font size="2" face="Tahoma"&gt;Der &lt;a href="http://www.msdn-on-tour.de/ablauf.aspx"&gt;MSDN on Tour-Bus&lt;/a&gt;&lt;/font&gt;&lt;font size="2" face="Tahoma"&gt;&lt;/font&gt;&lt;font size="2" face="Tahoma"&gt; ist vom 26.01. bis zum 05.03.2011 quer durch Deutschland unterwegs. Der Tour-Bus ist ein rollendes Präsentationsstudio, in dem &lt;/font&gt;&lt;font size="2" face="Tahoma"&gt;ein breitgefächertes Vortragsangebot zu aktuellen Entwicklerthemen (zwei parallele oder ein gemeinsamer Vortrag) bereit steht. Der Eintritt ist frei.&lt;br /&gt;&lt;/font&gt; &lt;ul&gt; &lt;li&gt;&lt;font size="2" face="Tahoma"&gt;Man kann den Tour-Bus auch &lt;a href="http://www.msdn-on-tour.de/anmeldung_gruppe.aspx"&gt;in seine Stadt oder zu seiner Firma holen&lt;/a&gt;&lt;/font&gt;&lt;font size="2" face="Tahoma"&gt;! (&lt;/font&gt;&lt;font size="2" face="Tahoma"&gt;Themenwünsche werden nach Möglichkeit ebenfalls berücksichtigt)&lt;/font&gt;&lt;/li&gt; &lt;li&gt;&lt;font size="2" face="Tahoma"&gt;Lassen Sie sich &lt;a href="http://www.msdn-on-tour.de/anmeldung_einzel.aspx"&gt;benachrichtigen&lt;/a&gt; über die aktuelle Stationen des Busses&lt;/font&gt;&lt;/li&gt; &lt;li&gt;&lt;font size="2" face="Tahoma"&gt;Nehmen Sie an unseren &lt;/font&gt;&lt;a href="http://www.msdn-on-tour.de/Gewinnspiel.aspx"&gt;&lt;font size="2" face="Tahoma"&gt;MSDN on Tour-Gewinnspielen&lt;/font&gt;&lt;/a&gt;&lt;font size="2" face="Tahoma"&gt; online und vor Ort teil.&lt;/font&gt;&lt;/li&gt; &lt;li&gt;&lt;font size="2" face="Tahoma"&gt;Unser &lt;/font&gt;&lt;a href="http://www.msdn-on-tour.de/Charity.aspx"&gt;&lt;font size="2" face="Tahoma"&gt;Charity-Bonbon: Busbesitzer für einen Tag werden!&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;b&gt;&lt;font size="2" face="Tahoma"&gt;Alle weiterführende Informationen: &lt;/font&gt;&lt;/b&gt;&lt;a href="http://www.msdn-on-tour.de"&gt;&lt;b&gt;&lt;font size="2" face="Tahoma"&gt;http://www.msdn-on-tour.de&lt;/font&gt;&lt;/b&gt;&lt;/a&gt; &lt;p&gt;&lt;a href="http://blogs.msdn.com/cfs-file.ashx/__key/CommunityServer-Blogs-Components-WeblogFiles/00-00-00-45-10-metablogapi/1777.MSDN-Bus_5F00_2.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="MSDN Bus" border="0" alt="MSDN Bus" src="http://blogs.msdn.com/cfs-file.ashx/__key/CommunityServer-Blogs-Components-WeblogFiles/00-00-00-45-10-metablogapi/1680.MSDN-Bus_5F00_thumb.jpg" width="500" height="235" /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=10113656" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 12:15:48 Z</pubDate>
      <a10:rights type="text">Jens Häupel [MS]</a10:rights>
      <a10:contributor>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jens Häupel [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:10113645</guid>
      <link>http://blogs.msdn.com/b/jensha/archive/2011/01/10/open-xml-dateien-aufbauen-und-ver-228-ndern-teil-6.aspx</link>
      <a10:author>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:author>
      <title>Open XML Dateien aufbauen und verändern (Teil 6)</title>
      <description>&lt;p&gt;&lt;span style="font-family: Tahoma; font-size: x-small;"&gt;&lt;strong&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Zeichenketten zu bestehenden Dateien hinzuf&amp;uuml;gen&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Bisher haben wir uns nur mit dem Neuerzeugen von Arbeitsmappen besch&amp;auml;ftigt. Deshalb jetzt noch ein Blick hinter die Kulissen f&amp;uuml;r den Fall, dass die Datei schon existiert. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;b&gt;&lt;span style="font-family: Tahoma; font-size: x-small;"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;p&gt;&lt;b&gt;&lt;span style="font-family: Tahoma; font-size: x-small;"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;p&gt;&lt;b&gt;&lt;span style="font-family: Tahoma; font-size: x-small;"&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:43584a1b-ada4-47b6-b35b-f3fd3fe05a22" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 639px; height: 462px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;private&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;void&lt;/span&gt;&lt;span style="color: #000000;"&gt; AddSharedStringsToExistingWorksheet(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; FName, 
                                                 &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; sheetName, 
                                                 &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; cellRef, 
                                                 &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; sharedString)
{
   &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;using&lt;/span&gt;&lt;span style="color: #000000;"&gt; (SpreadsheetDocument xlDoc &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; SpreadsheetDocument.Open(FName, &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;true&lt;/span&gt;&lt;span style="color: #000000;"&gt;))
   {
      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gibt es einen SharedStringTablePart?
         &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Nein ==&amp;gt; erzeugen
 
      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gibt es das Worksheet?
         &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Nein ==&amp;gt; erzeugen
 
      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gibt es die gesuchte Zeile?
         &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Nein ==&amp;gt; erzeugen
        
      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Gibt es die gesuchte Zelle in der Zeile?
         &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Nein ==&amp;gt; erzeugen

      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; String einf&amp;uuml;gen
 
      &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; Dokument speichern&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;   }
}

&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;&lt;b&gt;Gibt es einen SharedStringTablePart?&lt;/b&gt; &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Wir k&amp;ouml;nnten jetzt nat&amp;uuml;rlich wieder mit Inline Strings arbeiten (und es spricht eigentlich nichts dagegen), aber wir wollen streng &amp;ldquo;by the book&amp;rdquo; vorgehen die Zeichenketten in die Shared Strings-Tabelle eintragen. Dazu muss zuerst einmal geschaut werden, ob diese &amp;uuml;berhaupt vorhanden ist. Wenn nicht, muss sie erzeugt werden. GetPartsOfType() liefert eine Sammlung aller gefundenen Parts eines bestimmten Typs. Da es nur einen geben kann, k&amp;ouml;nnen wir mit der Extension Method FirstOrDefault() die gew&amp;uuml;nschte Referenz erhalten. First() kann hier nicht verwendet werden, da nur FirstOrDefault() bei leerer Liste null liefert. In dem Fall m&amp;uuml;ssen wir den Part selbst erzeugen. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:cff027b1-c061-4824-9f24-464580fc7c61" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 639px; height: 104px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;SharedStringTablePart sstPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; 
   xlDoc.WorkbookPart.GetPartsOfType&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;SharedStringTablePart&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;().FirstOrDefault();
&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (sstPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)   
   sstPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; xlDoc.WorkbookPart.AddNewPart&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;SharedStringTablePart&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;();
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;&lt;b&gt;Gibt es das Worksheet?&lt;/b&gt; &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Zuerst m&amp;uuml;ssen wir den WorkbookPart holen, da dort die Referenzen auf die Worksheets gehalten werden. Daraus l&amp;auml;&amp;szlig;t sich &amp;uuml;ber Lambda Functions das Worksheet mit den gesuchten Namen ermitteln oder erzeugen, falls noch nicht vorhanden. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:dfae9e25-1e4d-42d5-bc4d-062dd27391fd" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 639px; height: 231px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;WorkbookPart wbPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; xlDoc.WorkbookPart;
Workbook wb &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; wbPart.Workbook;
Sheet sheet &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; wb.GetFirstChild&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Sheets&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;().Elements&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Sheet&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;()
                .Where(s &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; s.Name &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; sheetName).FirstOrDefault();

WorksheetPart wsPart;
Worksheet ws &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;;
&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (sheet &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)  &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; nicht da ==&amp;gt; erzeugen&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;{
   wsPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; InsertWorksheetPart(wbPart, tbWorksheetName.Text);
   ws &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; Worksheet(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; SheetData());  &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; worksheet.xml erzeugen&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;}
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Wenn es schon existiert, k&amp;ouml;nnten wir uns eigentlich zur&amp;uuml;cklehnen, da wir weiter ober ja schon das Sheet mit den entsprechenden Namen gefunden hatten. Weit gefehlt. Oben wird eine Referenz auf ein Sheet zur&amp;uuml;ckgegeben, wir brauchen aber die Referenz auf das Worksheet. Das ist ein kleiner, aber feiner Unterschied. &amp;Uuml;ber die ID des Sheets k&amp;ouml;nnen wir den WorksheetPart extrahieren (GetPartById) und von dort kommen wir an das Worksheet. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:29c6151f-7a78-4887-a26a-2b60b92f8dfc" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 639px; height: 123px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #0000FF;"&gt;else&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #008000;"&gt;//&lt;/span&gt;&lt;span style="color: #008000;"&gt; es existiert&lt;/span&gt;&lt;span style="color: #008000;"&gt;
&lt;/span&gt;&lt;span style="color: #000000;"&gt;{
   &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;string&lt;/span&gt;&lt;span style="color: #000000;"&gt; rId &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; sheet.Id.Value;
   wsPart &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (WorksheetPart)xlDoc.WorkbookPart.GetPartById(rId); 
   ws &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; wsPart.Worksheet;  
}
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Aus dem Worksheet muss nun noch das Root Element der Tabelle geholt werden - da wir ja vorher nicht wissen k&amp;ouml;nnen, ob das Worksheet existiert. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: Consolas;"&gt;&lt;span style="font-size: small;"&gt;&lt;span style="color: #9b00d3;"&gt;SheetData&lt;/span&gt; sd = ws.GetFirstChild&amp;lt;&lt;span style="color: #9b00d3;"&gt;SheetData&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;b&gt;&lt;span style="font-family: Tahoma; font-size: x-small;"&gt;&lt;/span&gt;&lt;/b&gt;&amp;nbsp;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;&lt;b&gt;Gibt es die gesuchte Zeile?&lt;/b&gt; &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Eine Excel-Tabelle ist zeilenweise aufgebaut. Unterhalb des SheetData Elements befinden sich die Tabellen-Zeilen im Markup. Also m&amp;uuml;ssen wir die mit dem vorgegebenen Zeilenindex finden oder erzeugen. Die Hilfsfunktion RemoveAllButNumbers ist eine eigene Extension Method, die aus einer Zelladresse (AB123) nur die Zeilenreferenz (123) zur&amp;uuml;ck liefert. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:2edf1765-3ce7-4e80-a9ec-af0b493b6126" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 469px; height: 144px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;UInt32 rowIndex &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; (UInt32)cellRef.RemoveAllButNumbers();
Row row &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; sd.Elements&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Row&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;()
            .Where(r &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; r.RowIndex.Value &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; rowIndex) 
            .FirstOrDefault();
&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (row &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
   row &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; CreateNewRow(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;ref&lt;/span&gt;&lt;span style="color: #000000;"&gt; sd, rowIndex);  
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;&lt;b&gt;Gibt es die gesuchte Zelle?&lt;/b&gt; &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;In etwa das Gleiche machen wir mit der Zelle innerhalb der eben gefundenen Zeile. &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:5e308a17-4504-4b2e-a6e3-f5d2b8a1a3b5" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 469px; height: 127px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;Cell cell &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; row.Elements&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;Cell&lt;/span&gt;&lt;span style="color: #000000;"&gt;&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt;()
               .Where(c &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&amp;gt;&lt;/span&gt;&lt;span style="color: #000000;"&gt; c.CellReference &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; cellRef)
               .FirstOrDefault();
&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt;&lt;span style="color: #000000;"&gt; (cell &lt;/span&gt;&lt;span style="color: #000000;"&gt;==&lt;/span&gt;&lt;span style="color: #000000;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;null&lt;/span&gt;&lt;span style="color: #000000;"&gt;)
   cell &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; CreateNewCell(&lt;/span&gt;&lt;span style="color: #0000FF;"&gt;ref&lt;/span&gt;&lt;span style="color: #000000;"&gt; row, cellRef);
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Zellwerte schreiben und speichern&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Zum Abschlu&amp;szlig; wird die Zeichenkette in der Shared Strings-Tabelle gespeichert bzw. - falls dort schon vorhanden - deren Index ermittelt und dieser in die ermittelte oder erzeugte Zelle eingetragen. (Die Routine zum Eintragen des Shared Strings wurde schon in Teil 2 beschrieben.) &lt;/span&gt;&lt;/span&gt;
&lt;p&gt;
&lt;div class="wlWriterEditableSmartContent" id="scid:9D7513F9-C04C-4721-824A-2B34F0212519:888c9fc0-e2f3-4d35-a54b-0df9fda85350" style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px"&gt;
&lt;pre style="background-color: white; width: 550px; height: 143px; overflow: visible;"&gt;&lt;div&gt;&lt;!--

code highlighting produced by Actipro CodeHighlighter (freeware)
http://www.CodeHighlighter.com/

--&gt;&lt;span style="color: #000000;"&gt;cell.DataType &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; CellValues.SharedString;
cell.CellReference &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; cellRef;
cell.CellValue &lt;/span&gt;&lt;span style="color: #000000;"&gt;=&lt;/span&gt;&lt;span style="color: #000000;"&gt; 
  &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;new&lt;/span&gt;&lt;span style="color: #000000;"&gt; CellValue(InsertSharedStringItem(sharedString, sstPart).ToString());

ws.Save(wsPart);
&lt;/span&gt;&lt;/!--

code&gt;&lt;/div&gt;&lt;/pre&gt;
&lt;!-- Code inserted with Steve Dunn's Windows Live Writer Code Formatter Plugin.  http://dunnhq.com --&gt;&lt;/!--&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;So, wie man sieht, kann man sich auf nichts verlassen ;-) und muss st&amp;auml;ndig pr&amp;uuml;fen, ob bestimmte Teile schon vorhanden sind. Es wird in der Praxis wohl weitaus h&amp;auml;ufiger vorkommen, schon existierende Dateien abfragen oder &amp;auml;ndern zu m&amp;uuml;ssen als neue zu erzeugen. Nichtsdestotrotz lohnt sich ein Blick auch hinter diese Kulissen, um die Zusammenh&amp;auml;nge zu verstehen. So ein Dateiformat ist verdammt komplex und man wird als Einzelner wohl nie alles verstehen k&amp;ouml;nnen, was in einer Excel- oder Word-Datei so alles vor sich geht. Das Gute an der Sache ist, das man nie alles braucht, sondern einzelne Teilbereiche relativ gut von anderen abgetrennt sind. So kommt man dann Schritt f&amp;uuml;r Schritt voran. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: Tahoma;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;Das Beispielprojekt kann &amp;uuml;brigens &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="http://cid-73b6fdcae60daf98.office.live.com/self.aspx/Public/Sample%20Project.zip"&gt;&lt;span style="font-family: Tahoma;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;hier&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt; heruntergeladen werden. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;span style="font-family: Tahoma;"&gt;&lt;span style="font-size: x-small;"&gt;&lt;span style="font-family: tahoma,arial,helvetica,sans-serif;"&gt;&lt;span style="font-size: small;"&gt;[Fortsetzung folgt]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;
&lt;/p&gt;&lt;div style="clear:both;"&gt;&lt;/div&gt;&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=10113645" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 11:18:00 Z</pubDate>
      <a10:rights type="text">Jens Häupel [MS]</a10:rights>
      <a10:contributor>
        <a10:name>Jens Häupel [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jens Häupel [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:10113614</guid>
      <link>http://blogs.msdn.com/b/dparys/archive/2011/01/10/html5-video-helper-mit-silverlight-und-flash-fallback.aspx</link>
      <a10:author>
        <a10:name>Dariusz Parys [MS]</a10:name>
      </a10:author>
      <title>HTML5 Video Helper mit Silverlight und Flash Fallback</title>
      <description>Dank HTML5 ist es recht einfach Video Elemente in Webseiten einzubinden. Man benötigt lediglich ein &amp;lt;video&amp;gt; Element und gibt die Quelle an. Möchte man mehrere Plattformen unterstützen so langt meist eine Video Quelle nicht aus oder man möchte einfach...(&lt;a href="http://blogs.msdn.com/b/dparys/archive/2011/01/10/html5-video-helper-mit-silverlight-und-flash-fallback.aspx"&gt;read more&lt;/a&gt;)&lt;img src="http://blogs.msdn.com/aggbug.aspx?PostID=10113614" width="1" height="1"&gt;</description>
      <pubDate>Mon, 10 Jan 2011 10:47:16 Z</pubDate>
      <a10:rights type="text">Dariusz Parys [MS]</a10:rights>
      <a10:contributor>
        <a10:name>Dariusz Parys [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dariusz Parys [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://devtyr.norberteder.com/post.aspx?id=934e0461-5c87-4b6b-9d4d-6205caeeaed8</guid>
      <link>http://devtyr.norberteder.com/post/Kontextmenu-zu-Listeneintrag-hinzufugene28093Windows-Phone-7.aspx</link>
      <a10:author>
        <a10:name>Norbert Eder</a10:name>
      </a10:author>
      <title>Kontextmenü zu Listeneintrag hinzufügen–Windows Phone 7</title>
      <description>&lt;p&gt;Panoramaanwendungen sollten keine Application Bar verwenden. Da aber dennoch Items angelegt, gelöscht etc. werden müssen, bietet sich für Listeneinträge ein Kontextmenü an. Ein solches ist im &lt;a href="http://silverlight.codeplex.com/" target="_blank"&gt;Silverlight Toolkit für Windows Phone 7&lt;/a&gt; enthalten.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://devtyr.norberteder.com/image.axd?picture=image_7.png" target="_blank"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 10px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="Silverlight Toolkit für Windows Phone 7 einbinden" border="0" alt="Silverlight Toolkit für Windows Phone 7 einbinden" src="http://devtyr.norberteder.com/image.axd?picture=image_thumb_6.png" width="499" height="193" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Nach erfolgtem Einbinden der Assembly ist ein entsprechender XML-Namespace zu setzen:&lt;/p&gt;  &lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;xmlns:toolkit=&amp;quot;clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit&amp;quot;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Im Anschluss kann das Kontextmenü beispielsweise so aufgebaut werden:&lt;/p&gt;

&lt;div style="border-bottom: silver 1px solid; text-align: left; border-left: silver 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; max-height: 200px; font-size: 8pt; overflow: auto; border-top: silver 1px solid; cursor: text; border-right: silver 1px solid; padding-top: 4px" id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&amp;lt;StackPanel x:Name=&lt;span style="color: #006080"&gt;&amp;quot;ListEntry&amp;quot;&lt;/span&gt; Orientation=&lt;span style="color: #006080"&gt;&amp;quot;Horizontal&amp;quot;&lt;/span&gt;&amp;gt;&lt;br /&gt;    &amp;lt;TextBlock Text=&lt;span style="color: #006080"&gt;&amp;quot;{Binding Distance}&amp;quot;&lt;/span&gt; TextWrapping=&lt;span style="color: #006080"&gt;&amp;quot;Wrap&amp;quot;&lt;/span&gt; /&amp;gt;&lt;br /&gt;    &amp;lt;TextBlock Text=&lt;span style="color: #006080"&gt;&amp;quot;{Binding AreaType}&amp;quot;&lt;/span&gt; TextWrapping=&lt;span style="color: #006080"&gt;&amp;quot;Wrap&amp;quot;&lt;/span&gt; /&amp;gt;&lt;br /&gt;    &amp;lt;toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;br /&gt;        &amp;lt;toolkit:ContextMenu&amp;gt;&lt;br /&gt;            &amp;lt;toolkit:MenuItem Header=&lt;span style="color: #006080"&gt;&amp;quot;Create&amp;quot;&lt;/span&gt; &lt;br /&gt;                              Command=&lt;span style="color: #006080"&gt;&amp;quot;{Binding CreateCommand}&amp;quot;&lt;/span&gt; &lt;br /&gt;                              CommandParameter=&lt;span style="color: #006080"&gt;&amp;quot;{Binding ElementName=ListEntry,Path=SelectedItem}&amp;quot;&lt;/span&gt;/&amp;gt;&lt;br /&gt;        &amp;lt;/toolkit:ContextMenu&amp;gt;&lt;br /&gt;    &amp;lt;/toolkit:ContextMenuService.ContextMenu&amp;gt;&lt;br /&gt;&amp;lt;/StackPanel&amp;gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Ein derartiges &lt;font face="Courier New"&gt;StackPanel&lt;/font&gt; kann (wie in meiner eigentlichen Anwendung) als &lt;font face="Courier New"&gt;DataTemplate&lt;/font&gt; für eine Liste verwendet werden. Dies würde bedeuten, dass jeder Eintrag ein entsprechendes Kontextmenü erhält. Angebunden wird ein Command, der den aktuell ausgewählten Eintrag als Parameter enthält und daraufhin seine Operation ausführen kann.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Hinweis&lt;/strong&gt;: Für eigene Tests bitte sicherstellten, dass die Bindungen entsprechend angepasst werden, da diese aus einem meiner aktuellen Projekte stammen und in der Umgebung des Lesers nicht funktionieren werden.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In der laufenden Anwendung sieht dies so aus:&lt;/p&gt;

&lt;p&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px 10px 10px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Listeneintrag mit Kontextmenü - Windows Phone 7" border="0" alt="Listeneintrag mit Kontextmenü - Windows Phone 7" src="http://devtyr.norberteder.com/image.axd?picture=image_8.png" width="240" height="86" /&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 10:30:00 +0100</pubDate>
      <a10:rights type="text">Norbert Eder</a10:rights>
      <a10:contributor>
        <a10:name>Norbert Eder</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Norbert Eder</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://webenliven-space.de/dotnetblog/post.aspx?id=0616a88a-b062-401f-96fe-1f79f47d84c2</guid>
      <link>http://webenliven-space.de/dotnetblog/post/2011/01/10/Neuer-Artikel-e2809cSilverlight-fur-unterwegs-Entwicklung-fur-Windows-Phone-7e2809d-2b-Eine-neue-Folge-von-Silverlight-Expertise.aspx</link>
      <a10:author>
        <a10:name>Gregor Biswanger</a10:name>
      </a10:author>
      <title>Neuer Artikel: “Silverlight für unterwegs: Entwicklung für Windows Phone 7” + Eine neue Folge von Silverlight-Expertise</title>
      <description>&lt;p&gt;&lt;a href="http://it-republik.de/dotnet/dotnet-magazin-ausgaben/Windows-Phone-7-000429.html" target="_blank"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="dotnet-magazin-logo" border="0" alt="dotnet-magazin-logo" src="http://webenliven-space.de/dotnetblog/image.axd?picture=Windows-Live-Writer/b436e761e429/06BC01AB/dotnet-magazin-logo.jpg" width="177" height="59" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;In der neuen Ausgabe vom dot.net Magazin gibt es einen neuen Artikel meinerseits:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Silverlight für unterwegs: Entwicklung für Windows Phone 7&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Microsoft veröffentlichte das neue Smartphone-Betriebssystem Windows Phone 7, das mehrere Besonderheiten und ein komplett neues Konzept mit sich brachte. Eine der Neuerungen: Die Apps bauen auf Silverlight auf. Somit wird die Entwicklung für Apps um einiges einfacher als bisher. Dieser Artikel bietet eine Übersicht für die ersten Schritte der Windows-Phone-Entwicklung.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;font size="5"&gt;+&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Einer neuen Folge von meiner Silverlight-Kolumne “Silverlight-Expertise”:&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Silverlight-Expertise - Die Crème de la Crème des Monats&lt;/strong&gt;&lt;strong&gt;&amp;#160; &lt;br /&gt;&lt;/strong&gt;Die Serie „Silverlight Expertise“ des dot.NET Magazins präsentiert monatlich zwei leckere Top-How-Tos zum Thema Silverlight von Gregor Biswanger (www.dotnet-blog.net), sodass Einsteiger und fortgeschrittene Silverlight-Experten durch geballtes Wissen gesättigt werden. Heute stehen auf der Menükarte „&lt;strong&gt;Die AutoCompleteBox&lt;/strong&gt;“ und „&lt;strong&gt;Das Filtern von Daten&lt;/strong&gt;“. Viel Spaß und einen guten Appetit.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://webenliven-space.de/dotnetblog/image.axd?picture=Windows-Live-Writer/b436e761e429/38B3A235/Windows_Phone_Logo_Horizont.jpg"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="Windows_Phone_Logo_Horizont" border="0" alt="Windows_Phone_Logo_Horizont" src="http://webenliven-space.de/dotnetblog/image.axd?picture=Windows-Live-Writer/b436e761e429/4685E830/Windows_Phone_Logo_Horizont_thumb.jpg" width="240" height="43" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Neu!&lt;/strong&gt; Mit dabei ist jeweils ein How-To zum Thema Windows Phone 7. Hier steht auf der Menükarte: “&lt;strong&gt;Individueller Splashscreen&lt;/strong&gt;”.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://it-republik.de/dotnet/dotnet-magazin-ausgaben/Windows-Phone-7-000429.html" target="_blank"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="dotnetmagazin-02-2011" border="0" alt="dotnetmagazin-02-2011" src="http://webenliven-space.de/dotnetblog/image.axd?picture=Windows-Live-Writer/b436e761e429/5F81B875/dotnetmagazin-02-2011.png" width="174" height="244" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Zu lesen ist der Artikel und die How-To´s beim dot.net magazin, &lt;a href="http://it-republik.de/dotnet/dotnet-magazin-ausgaben/Windows-Phone-7-000429.html" target="_blank"&gt;Ausgabe 02/2011&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 10:13:21 -0500</pubDate>
      <a10:rights type="text">Gregor Biswanger</a10:rights>
      <a10:contributor>
        <a10:name>Gregor Biswanger</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gregor Biswanger</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.bigbasti.com/?p=1548</guid>
      <link>http://feedproxy.google.com/~r/bigbasti/yEFJ/~3/zqibESwuft8/</link>
      <a10:author>
        <a10:name>Sebastian Gross</a10:name>
      </a10:author>
      <title>.NET WebServices anlegen und konsumieren</title>
      <description>Letzte Woche haben uns angeschaut, wie man unter Java e [...]</description>
      <pubDate>Mon, 10 Jan 2011 08:22:20 Z</pubDate>
      <a10:rights type="text">Sebastian Gross</a10:rights>
      <a10:content type="html">&lt;p&gt;Letzte Woche haben uns angeschaut, wie man &lt;a href="http://blog.bigbasti.com/java-webservice-anlegen-und-konsumieren/" target="_blank"&gt;unter Java einen WebService anlegen&lt;/a&gt; kann und diesen dann auch verwenden (konsumieren), heute gucken wir wie das Ganze unter .NET funktioniert und legen den selben Service auch hier mal an.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HINWEIS: Ich verwende hier Visual Studio 2010 Ultimate, soweit ich weiß können die C#/VB.NET Express Versionen keine WebServices anlegen, dazu solltet ihr den &lt;/em&gt;&lt;a href="http://www.microsoft.com/germany/express/products/web.aspx" target="_blank"&gt;&lt;em&gt;Visual Web Developer Express&lt;/em&gt;&lt;/a&gt;&lt;em&gt; herunterladen.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.bigbasti.com/uploads/110.png"&gt;&lt;img class="alignleft size-thumbnail wp-image-1551" title="1" src="http://blog.bigbasti.com/uploads/110-150x150.png" alt="" width="72" height="72" /&gt;&lt;/a&gt;Klickt also auf Datei&amp;gt;Neu&amp;gt; Projekt und Wählt "Web" bzw. "Internet" unter C#. Damit euch das WebService Projekt überhaupt vorgeschlagen wird müsst ihr die verwendete Frameworkversion auf 2.0 stellen (Siehe Bild), wählt dann ASP.NET Webdienstanwendung. Benennt das Projekt nun "USerDB" (genauso wie im Java Beispiel) und klickt auf OK.&lt;/p&gt;
&lt;p&gt;Wenn das Projekt angelegt ist, solltet ihr ungefähr folgendes sehen:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/27.png"&gt;&lt;img class="size-full wp-image-1554 aligncenter" title="2" src="http://blog.bigbasti.com/uploads/27.png" alt="" width="465" height="240" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Im Grunde haben wir hier bereits einen funktionierenden WebService den wir auch schon ausführen können. Ähnlich wie beim Glassfish unter Java bekommen wir dann eine Testseite angezeigt auf der alle Methoden des Dienstes sichtbar sind und getestet werden können:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/32.png"&gt;&lt;img class="alignnone size-full wp-image-1558" title="3" src="http://blog.bigbasti.com/uploads/32.png" alt="" width="510" height="114" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Bevor wir hier aber weiter machen implementieren wir erst einmal unsere Methode aus dem Java Beispiel:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/51.png"&gt;&lt;img class="size-full wp-image-1560 aligncenter" title="5" src="http://blog.bigbasti.com/uploads/51.png" alt="" width="408" height="215" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Wenn wir den Service erneut ausführen und auf der Testseite unsere Funktion wählen bekommen wir ein ähnliches Bild zu sehen wie unter Java:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/41.png"&gt;&lt;img class="size-full wp-image-1561 aligncenter" title="4" src="http://blog.bigbasti.com/uploads/41.png" alt="" width="483" height="246" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Auch hier wird anschließend ein SOAP Request für uns erzeugt und an den Service gesendet, dieser wird dann inklusive dem SOAP Response auf der Ergebnisseite angezeigt.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Damit haben wir den WebService bereits fertiggestellt, machen wir uns nun also daran diesen zu konsumieren.&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/61.png"&gt;&lt;img class="alignnone size-thumbnail wp-image-1563" title="6" src="http://blog.bigbasti.com/uploads/61-150x150.png" alt="" width="105" height="105" /&gt;&lt;/a&gt; &lt;a href="http://blog.bigbasti.com/uploads/71.png"&gt;&lt;img class="alignnone size-thumbnail wp-image-1565" title="7" src="http://blog.bigbasti.com/uploads/71-150x150.png" alt="" width="105" height="105" /&gt;&lt;/a&gt; &lt;a href="http://blog.bigbasti.com/uploads/612.png"&gt;&lt;img class="alignnone size-thumbnail wp-image-1566" title="6,1" src="http://blog.bigbasti.com/uploads/612-150x150.png" alt="" width="105" height="105" /&gt;&lt;/a&gt; &lt;a href="http://blog.bigbasti.com/uploads/81.png"&gt;&lt;img class="alignnone size-thumbnail wp-image-1567" title="8" src="http://blog.bigbasti.com/uploads/81-150x150.png" alt="" width="105" height="105" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Fügen wir als erstes ein neues Konsolen Projekt zu unserer Projektmappe hinzu (Bild 6). Nachdem das Projekt angelegt ist fügen wir einen neuen Webverweis hinzu (Bild 7). In dem Dialog der nun auftaucht kann man die Quelle für die Schnittstellenbeschreibung (WSDL) wählen. Man kann hier direkt eine Referenz auf das Projekt in der Projektmappe anlegen. Wir wollen aber direkt die URL der WSDL in der Obere Textfeld angeben.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;An die WSDL kommt man übrigens sehr einfach, indem man die Testerseite des WebServices aufruft und dort auf den Link namens "Dienstbeschreibung" klickt, diese URL müssen wir hier angeben. Das Tool analysiert die WSDL und zeigt uns eine Übersicht über die Operationen dieses Dienstes an (Bild 8), hier tragen wir noch den gewünschten Namen ein (bei mir "UserDBService") und klicken auf Verweis hinzufügen.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;An dieser Stelle hat die IDE für uns den harten Teil schon erledigt und alle nötigen Klassen und Methoden generiert, die nötig sind um unseren WebService zu nutzen. Implementieren wir also unsere Funktion aus dem letzten Artikel:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/91.png"&gt;&lt;img class="alignnone size-full wp-image-1571" title="9" src="http://blog.bigbasti.com/uploads/91.png" alt="" width="562" height="462" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Die interessanten Stellen habe ich hier markiert, so sollte man nicht vergessen eine Referenz auf unseren WebService zu setzen bevor man loslegt.&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Im Vergleich zu Java bekommen wir hier sogar noch mehr fürs Geld, denn in den generierten Klasse finden wir zu unseren Methoden auch schon asynchrone Aufrufe inklusive der Completed-Events:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/101.png"&gt;&lt;img class="size-full wp-image-1573 aligncenter" title="10" src="http://blog.bigbasti.com/uploads/101.png" alt="" width="312" height="80" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Und da die Klasse von System.Web.Services.Protocols.&lt;a href="http://msdn.microsoft.com/en-us/library/system.web.services.protocols.soaphttpclientprotocol.aspx" target="_blank"&gt;SoapHttpClientProtocol&lt;/a&gt; erbt, bekommen wir auch alle anderen wichtigen Properties und Funktionen die man in einem web-bezogenen Projekt benötigen könnte &lt;img src='http://blog.bigbasti.com/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /&gt; &lt;/p&gt;
&lt;p style="text-align: left;"&gt;Die generierten Klassen und auch die WSDL findet ihr übrigens im Projektverzeichnis in dem Ordner "Web References".&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Führen wir nun unser Programm aus, erwartet uns das Selbe wie in unserem Java Beispiel:&lt;/p&gt;
&lt;p style="text-align: center;"&gt;&lt;a href="http://blog.bigbasti.com/uploads/111.png"&gt;&lt;img class="size-full wp-image-1575 aligncenter" title="11" src="http://blog.bigbasti.com/uploads/111.png" alt="" width="516" height="131" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align: left;"&gt;Natürlich muss der Dienst nicht unbedingt in .NET sein, so könntet ihr genauso gut die WSDL aus unserem Java Beispiel verwenden um einen .NET Consumer für einen Java WebService zu erstellen .&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dotnet-kicks.de/kick/?url=http%3a%2f%2fblog.bigbasti.com%2fnet-webservices-anlegen-und-konsumieren%2f"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.bigbasti.com%2fnet-webservices-anlegen-und-konsumieren%2f" border="0" alt="kick it on dotnet-kicks.de" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class="wp-flattr-button"&gt;&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/bigbasti/yEFJ/~4/zqibESwuft8" height="1" width="1"/&gt;</a10:content>
      <a10:contributor>
        <a10:name>Sebastian Gross</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Gross</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://www.codefest.at/post.aspx?id=4a6d7ccb-9d77-4f40-a466-0277baf4ef10</guid>
      <link>http://feedproxy.google.com/~r/MsdnAustria/~3/81-9OHVXgJI/post.aspx</link>
      <a10:author>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:author>
      <title>13.01.2011, Hagenberg (Linz): Interoperabilität von .NET und Java mit Windows Azure AppFabric (Cloud)</title>
      <description>&lt;p&gt;Im Jahr 2010 ist Cloud Computing endgültig angekommen. Nach dem anfänglichen Hype werden wir uns im Jahr 2011 viel damit beschäftigen müssen, wie wir die Cloud Services, welche nun oft gefordert werden, integrieren. Auf den ersten Blick mag es so klingen als ob dies ein Ding der Unmöglichkeit wäre. Doch dem ist nicht so. In einem Beispiel, welches Java und .NET kombiniert, zeigen Jürgen Mayrbäurl und ich wie man diese Services mithilfe von Windows Azure kombiniert. Der Vortrag findet an der FH Hagenberg (vielen Dank an Werner Kurschl) statt.&lt;/p&gt;  &lt;p&gt;Details:&lt;/p&gt;  &lt;p&gt;Donnerstag 13.1.2011, 17:00-18:30   &lt;br /&gt;Hörsaal 4, FH OÖ Campus Hagenberg&lt;/p&gt;  &lt;p&gt;Inhalt   &lt;br /&gt;Heterogenität ist eine prägende Eigenschaft in der aktuellen IT-Landschaft von Enterprise Anwendungen. Dies wird durch den aktuell vor sich gehenden Paradigmenwechsel in Richtung Cloud Computing noch verstärkt, da zumindest mittelfristig hybride IT-Lösungen, bei denen On-Premise Systeme mit Cloud Services kommunizieren, vorherrschen werden. Das bedeutet, dass sich der Fokus auf Interoperabilität richten wird. Interoperabilität nicht nur wie bisher zwischen unterschiedlichen Technologien, sondern auch zwischen Server und Services Plattformen. Anhand eines praktischen Beispiels wird demonstriert, wie .NET basierende Cloud Services mit einer On-Premise Java Anwendung Daten austauschen können und mittels Service Schnittstellen Transaktionen in hybriden Lösungen bewerkstelligt werden können.&lt;/p&gt;  &lt;p&gt;   &lt;br /&gt;Zu den Personen    &lt;br /&gt;    &lt;br /&gt;Mario Meir-Huber ist Technical Director bei CodeForce, einem IT-Consulting und Services Unternehmen mit Hauptsitz in Wien. In dieser Rolle beschäftigt er sich primär mit neuen Technologien und deren Anwendung in Unternehmen. Sein Fachwissen gibt Mario Meir-Huber auf zahlreichen Konferenzen, Magazinbeiträgen und Blogartikeln weiter. Technologisch interessiert er sich primär für Cloud Computing und Natural User Interfaces. Vor allem im Bereich Cloud Computing ist die sinnvolle Anwendung solcher Plattformen in Unternehmen sein zentrales Interesse.    &lt;br /&gt;    &lt;br /&gt;Jürgen Mayrbäurl ist Teammitglied der Developer &amp;amp; Platform Group von Microsoft Österreich. Er betreut Softwarearchitekten und -entwicklungsleiter von Partnern und Kunden bei der Planung und Umsetzung von Enterprise-Lösungen auf Basis der Windows Plattformen. Aktuell liegt sein Schwerpunkt auf dem &amp;quot;Platform as a Service&amp;quot; Angebot der Microsoft Cloud Computing Plattform Windows Azure und er engagiert sich dabei, aufgrund seiner langjährigen praktischen Erfahrung mit Java und Linux Technologien, besonders für die Interoperabilität von Systemen in heterogenen IT-Umgebungen.&lt;/p&gt;</description>
      <pubDate>Mon, 10 Jan 2011 00:23:13 +0100</pubDate>
      <a10:rights type="text">msdn Austria [MS]</a10:rights>
      <a10:contributor>
        <a10:name>msdn Austria [MS]</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">msdn Austria [MS]</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html</guid>
      <link>http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html</link>
      <a10:author>
        <a10:name>Thomas Bandt</a10:name>
      </a10:author>
      <title>ASP.NET MVC - Login-Check für Ajax-Requests erweitern</title>
      <description>



    	

        
&lt;div id="3_Show_Content" class="BlogPostContainer"&gt;
	

    
    
    &lt;p&gt;Das Konzept der FormsAuthentication, welches bereits mit ASP.NET 1.0 anno 2002 eingeführt wurde, hat auch in ASP.NET MVC Bestand (auch wenn man auf Membership-, Profile-Provider und das andere Gedöns&amp;nbsp;heute getrost verzichten kann/sollte). Es wurde ganz elegant übernommen, in dem man die Authentifizierungs-Prüfung über Attribute jeweils auf Action- oder Controller-Ebene regeln kann:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;[Authorize]&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; ActionResult Index()&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    &lt;span class="kwrd"&gt;return&lt;/span&gt; View();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Ist das Ticket, sprich Cookie, abgelaufen oder die Anmeldung aus sonstigen Gründen ungültig, wird automatisch zum Login weitergeleitet - diese Seite lässt sich auch wie bisher per web.config festlegen:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;authentication&lt;/span&gt; &lt;span class="attr"&gt;mode&lt;/span&gt;&lt;span class="kwrd"&gt;="Forms"&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;forms&lt;/span&gt; &lt;span class="attr"&gt;loginUrl&lt;/span&gt;&lt;span class="kwrd"&gt;="~/account/login"&lt;/span&gt; &lt;span class="attr"&gt;timeout&lt;/span&gt;&lt;span class="kwrd"&gt;="120"&lt;/span&gt; &lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;authentication&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Der Vorgang ist also wie folgt:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;&amp;nbsp;Benutzer ruft eine Seite im Browser auf
    &lt;li&gt;Authentifizierung wird geprüft
    &lt;li&gt;Wenn alles ok ist, wird der Inhalt ausgeliefert
    &lt;li&gt;Wenn keine Authentifizierung möglich ist, wird zur Login-Seite weitergeleitet (302-Redirect) &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Das ist soweit auch ganz praktisch, es führt nur zu einem Problem: Bei der Verwendung von Ajax-Requests greift dieser Mechanismus ebenfalls. Und da diese bekanntermaßen "im Hintergrund" ablaufen, wird zwar der Request, der vom Script aus gefeuert wird, zur Login-Seite weitergeleitet - der Benutzer vor dem Bildschirm bekommt davon aber nichts mit. Für ihn passiert im besten Fall gar nichts, d.h. seine Aktion bleibt ohne Folgen und er wundert sich warum, im schlimmsten Fall fliegen ihm Scriptfehler um die Ohren (soll ja Leute geben, die noch den IE benutzen).&lt;/p&gt;
&lt;p&gt;In meinen Augen sollte es keinen Unterschied machen, ob der Benutzer eine Aktion über einen "normalen" Request, sprich Seitenaufruf, ausführt oder ob Ajax verwendet wird - z.B. beim Löschen von Datensätzen in einem Grid. Schlägt die Authentifizierung fehl, sollte das&amp;nbsp;Verhalten konsistent sein und&amp;nbsp;jeweils mit einem Hinweis zum Login weitergeleitet werden.&lt;/p&gt;
&lt;p&gt;Die Lösung des Ganzen besteht erwartungsgemäß aus zwei Teilen, einem auf der Serverseite und einem auf der Clientseite.&lt;/p&gt;
&lt;p&gt;Auf der Serverseite erstellt man einfach einen eigenen Filter, der vom AuthorizeAttribute ableitet und somit die volle Funktionalität behält. Es ist hier dann auch nicht mehr nötig von Hand zu prüfen, ob die Anfrage gültig ist oder nicht, das tut ja das AuthorizeAttribute bereits. Interessant wird es dann bei der Behandlung des Fehlers:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; AuthorizeLoginAttribute : AuthorizeAttribute&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;    &lt;span class="kwrd"&gt;protected&lt;/span&gt; &lt;span class="kwrd"&gt;override&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; HandleUnauthorizedRequest(AuthorizationContext filterContext)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (filterContext.HttpContext.Request.IsAjaxRequest())&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;        {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;            filterContext.HttpContext.Response.StatusCode = 401;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;            filterContext.HttpContext.Response.TrySkipIisCustomErrors = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;            filterContext.HttpContext.Response.End();&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;        }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;        &lt;span class="kwrd"&gt;base&lt;/span&gt;.HandleUnauthorizedRequest(filterContext);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Über die Erweiterungsmethode IsAjaxRequest(), die vom Mvc-Framework mitgeliefert wird, wird geprüft, ob es ein Ajax-Request ist. Anschließend wird der Status-Code auf 401 gesetzt (Unauthorized) und, ganz wichtig, festgelegt, dass die Standardfehlerbehandlung, wie in der Web.config definiert, nicht verwendet wird. Nur so umgeht man hier die automatisch greifende Weiterleitung.&lt;/p&gt;
&lt;p&gt;Die Verwendung geschieht erfolgt zu den Standard-Attributen:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;[AuthorizeLogin]&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; ActionResult Index()&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    &lt;span class="kwrd"&gt;return&lt;/span&gt; View();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Auf der Clientseite dachte ich zunächst daran das Ergebnis&amp;nbsp;bei jedem Request zu prüfen und dann weiterzuleiten - aber es ist&amp;nbsp;mit Hilfe von jQuery noch einfacher als auf der Serverseite:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;$().ready(function () {&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;    $(&lt;span class="str"&gt;'#AppStatusBar'&lt;/span&gt;).ajaxError(function (xhr, status, err) {&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (status.status == 401)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;            window.location.href = &lt;span class="str"&gt;'/account/login?ReturnUrl='&lt;/span&gt; + window.location.pathname;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;    });&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;});&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Es wird einfach ein globaler Fehler-Handler registriert, der für jeden Fehler, der bei Ajax-Aufrufen passiert, greift. Man bindet das Event einfach an irgendein Element, was auf jeder Seite vorhanden ist, bei mir ist das im Beispiel ein Div mit der ID AppStatusBar.&lt;/p&gt;
&lt;p&gt;Wenn der Statuscode 401 ist, wird zum Login weitergeleitet - und zwar mit Angabe der lokalen URL, damit auf diese im Anschluss weitergeleitet werden kann, wie es auch bei "normalen" Requests der Fall ist.&lt;/p&gt;
&lt;p&gt;That's it.&lt;/p&gt;


    
    
    


&lt;/div&gt;






&lt;hr /&gt;
&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html&amp;title=ASP.NET+MVC+-+Login-Check+f%c3%bcr+Ajax-Requests+erweitern"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.thomasbandt.de%2f39%2f2377%2fde%2fblog%2faspnet-mvc-login-check-fuer-ajax-requests-erweitern.html" border="0" alt="kick it on dotnet-kicks.de" style="vertical-align:middle" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html#Comments"&gt;&lt;img src="http://blog.thomasbandt.de/CommentCounter.ashx?ArticleID=e7715e8b-5574-405d-8e8b-c054f6f0cf3a" style="border:solid 0px black" /&gt;&lt;/a&gt; | &lt;a href="http://blog.thomasbandt.de/39/2377/de/blog/aspnet-mvc-login-check-fuer-ajax-requests-erweitern.html#AddComment"&gt;Kommentieren&lt;/a&gt; | &amp;copy; 2011 &lt;a href="http://blog.thomasbandt.de/"&gt;Thomas Bandt&lt;/a&gt;
</description>
      <pubDate>Mon, 10 Jan 2011 00:19:00 +0100</pubDate>
      <a10:rights type="text">Thomas Bandt</a10:rights>
      <a10:contributor>
        <a10:name>Thomas Bandt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Bandt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">tag:blogger.com,1999:blog-8163282460106371512.post-8095951004013361086</guid>
      <link>http://blog.uniquesoftware.de/2011/01/css-3-und-webfonts.html</link>
      <a10:author>
        <a10:name>Martin Hey</a10:name>
      </a10:author>
      <title>CSS 3 und Webfonts</title>
      <description>&lt;div xmlns='http://www.w3.org/1999/xhtml'&gt;Bisher war es immer etwas kompliziert, wollte man bestimmte Schriftarten beim Anwender anzeigen. Hier hatten WPF, Flash und Silverlight klar die Nase vor - konnte man hier doch die Schriftart in der xap-Datei mit ausliefern. In HTML-Seiten stand man vor dem Problem, dass nur die Schriftarten auch korrekt angezeigt werden, die auch auf dem Client-Rechner installiert waren. Klar gab und gibt es hier Workarounds wie Cufon, sIFR oder die Möglichkeit, Bilder zu verwenden. Aber das Gelbe vom Ei ist das nicht - besonders wenn man im öffentlichen Umfeld daran denkt, dass Screenreader damit klarkommen müssen, man mit Strg+F Inhalte auf der Seite finden möchte und so weiter und so fort.&lt;br/&gt;&lt;br /&gt;Genau hier kommen Webfonts ins Spiel und sie sind eine spannende Sache. Und Webfonts zu verwenden ist gar nicht so schwer. Basis ist die Deklaration des Webfonts mittels @font-face und verwendet den hier vergebenen Namen dann wie gewohnt als font-family.&lt;br/&gt;&lt;br/&gt;CSS:&lt;br /&gt;&lt;div style="border: 1px solid black; overflow: auto; width: 99%; background-color: rgb(230, 232, 250);"&gt;&lt;pre  style="font-family:consolas;"&gt;@font-face {&lt;br /&gt; font-family: 'MyOwnWebFont';&lt;br /&gt; src: url('fonts/mywebfont.woff') format('woff');&lt;br /&gt; src: url('fonts/mywebfont.otf') format('opentype');&lt;br /&gt;}&lt;br /&gt; &lt;br /&gt;h1 { &lt;br /&gt; font-family: MyOwnWebFont&lt;br /&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;HTML:&lt;br /&gt;&lt;div style="border: 1px solid black; overflow: auto; width: 99%; background-color: rgb(230, 232, 250);"&gt;&lt;pre  style="font-family:consolas;"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;br /&gt;&amp;lt;html&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;  &lt;br /&gt; &amp;lt;title&amp;gt;CSS 3 WebFonts Test&amp;lt;/title&amp;gt;&lt;br /&gt; &amp;lt;link href="site.css" rel="stylesheet" type="text/css"&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt; &amp;lt;h1&amp;gt;Überschrift in Webfont&amp;lt;/h1&amp;gt;&lt;br /&gt; &amp;lt;p&amp;gt;lorem ipsum&amp;lt;/p&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;br/&gt;Hinter jeder Quelle kann man noch eine Formatinformation mit angeben. So kann der Browser die erste Datei laden, mit deren Format er umgehen kann. Nähere Infos zur &lt;a href='http://www.w3.org/TR/css3-webfonts/' target='_blank'&gt;@font-face-Rule&lt;/a&gt; findet man in der CSS-Spezifikation.&lt;br/&gt;&lt;/div&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/8163282460106371512-8095951004013361086?l=blog.uniquesoftware.de' alt='' /&gt;&lt;/div&gt;</description>
      <pubDate>Sun, 09 Jan 2011 21:06:00 +0100</pubDate>
      <a10:link rel="replies" type="application/atom+xml" title="Kommentare zum Post" href="http://blog.uniquesoftware.de/feeds/8095951004013361086/comments/default" />
      <a10:link rel="replies" type="text/html" title="0 Kommentare" href="https://www.blogger.com/comment.g?blogID=8163282460106371512&amp;postID=8095951004013361086" />
      <a10:link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/8163282460106371512/posts/default/8095951004013361086" />
      <a10:link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/8163282460106371512/posts/default/8095951004013361086" />
      <a10:updated>2011-01-09T21:16:33+01:00</a10:updated>
      <a10:rights type="text">Martin Hey</a10:rights>
      <a10:contributor>
        <a10:name>Martin Hey</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Hey</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.ppedv.de/post.aspx?id=4f18b79f-2034-43a7-8038-cf1099d6092d</guid>
      <link>http://blog.ppedv.de/post/2011/01/09/Mehrseitiges-Drucken-mit-Silverlight-Teil-1.aspx</link>
      <a10:author>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:author>
      <title>Mehrseitiges Drucken mit Silverlight Teil 1</title>
      <description>&lt;p&gt;Viele Wege führen nach Rom. So auch beim Ausdrucken von Daten. Persönlich würde ich immer ein Reporting Tool, ala SQL Reporting Services wählen, um formatierte Ausdrucke zu erzeugen. Nichts desto trotz lässt sich mit Aufwand auch aus Silverlight drucken. Es gibt allerdings keine Report Designer! Entsprechend arbeiten die meisten Beispiele mit reinem Source Code um die Daten Reports zu erstellen. Das man bestehende Usercontrols recht einfach ausdrucken kann, habe ich bereits in meinem vorigen &lt;a href="http://blog.ppedv.de/post/2011/01/08/Drucken-mit-Silverlight-V1.aspx"&gt;Blog Post&lt;/a&gt; gezeigt. Nicht besonders schön und generell uncool per Code zu drucken.&lt;/p&gt;  &lt;p&gt;Folglich habe ich in meinen Beispiel eine XAML Page erstellt, die mir als Print Template dient. Vorerst ganz einfach.&lt;/p&gt;  &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Layoutroot&amp;quot;&lt;/span&gt; &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;sdk:DataGrid&lt;/span&gt; &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Center&amp;quot;&lt;/span&gt;
  &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Center&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;20&amp;quot;&lt;/span&gt; 
&lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;datagrid1&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;ItemsSource&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;{Binding}&amp;quot;&lt;/span&gt; 
                      &lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;sdk:DataGrid.Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt; &lt;span class="attr"&gt;TargetType&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;sdk:DataGrid&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;HorizontalScrollBarVisibility&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Disabled&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Setter&lt;/span&gt; &lt;span class="attr"&gt;Property&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;VerticalScrollBarVisibility&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Value&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Disabled&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;sdk:DataGrid.Style&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;sdk:DataGrid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Die Daten werden vom Benutzer geladen und dann mit einem extra Button ausgedruckt.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_23.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_23.png" width="244" height="171" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eine Seite zu drucken ist auch supereinfach zu erledigen. Der einzige Trick, ich reiche per Datacontext die Liste der Kunden durch und weise per Binding diese der Itemsource (siehe obiges XAML) wieder zu.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; Button2_Click(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; System.&lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; System.Windows.RoutedEventArgs) &lt;br /&gt;&lt;span class="kwrd"&gt;Handles&lt;/span&gt; Button2.Click
    &lt;span class="kwrd"&gt;Dim&lt;/span&gt; doc &lt;span class="kwrd"&gt;As&lt;/span&gt; PrintDocument = &lt;span class="kwrd"&gt;New&lt;/span&gt; PrintDocument()
    &lt;span class="kwrd"&gt;AddHandler&lt;/span&gt; doc.PrintPage, &lt;span class="kwrd"&gt;AddressOf&lt;/span&gt; doc_PrintPage
    doc.Print(&lt;span class="str"&gt;&amp;quot;KundenListe&amp;quot;&lt;/span&gt;)
&lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;
&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; doc_PrintPage(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; PrintPageEventArgs)
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; p &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt; printPage59
         p.DataContext = DataGrid1.ItemsSource
        p.Height = e.PrintableArea.Height
        p.Width = e.PrintableArea.Width
        e.PageVisual = p
&lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Ab hier wird es ein wenig peinlich. Wie stellt man fest, das man einen neue Seite drucken soll. Man könnte das aufwendig ausrechnen. Ich werde das auch sicher nochmal später in einem Beispiel tun. Vorerst habe ich einfach gezählt, wie viele Datensätze auf eine Seite passen. Dann kann man mit PageCounter und einem Linq Statement ganz einfach in der Datenmenge Pagen. Die nächste Seite druckt man per HasMorePages&lt;/p&gt;

&lt;pre class="csharpcode"&gt; &lt;span class="kwrd"&gt;Dim&lt;/span&gt; PageCounter &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Integer&lt;/span&gt; = 0
 &lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; doc_PrintPage(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; PrintPageEventArgs)
   &lt;span class="kwrd"&gt;Dim&lt;/span&gt; p &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;New&lt;/span&gt; printPage59
   &lt;span class="kwrd"&gt;Dim&lt;/span&gt; c &lt;span class="kwrd"&gt;As&lt;/span&gt; List(Of Customers) = DataGrid1.ItemsSource
   p.DataContext = c.Skip(PageCounter * 44).Take(44)
   &lt;span class="rem"&gt;'1122.0 printablearea , 44 Zeilen gezählt&lt;/span&gt;
   p.Height = e.PrintableArea.Height
   p.Width = e.PrintableArea.Width
   e.PageVisual = p
   &lt;span class="kwrd"&gt;If&lt;/span&gt; PageCounter * 44 &amp;lt; c.Count &lt;span class="kwrd"&gt;Then&lt;/span&gt;
       e.HasMorePages = &lt;span class="kwrd"&gt;True&lt;/span&gt;
       PageCounter += 1
    &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;If&lt;/span&gt;
 &lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Und so sieht das dann in etwas aus.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_24.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_24.png" width="244" height="164" /&gt;&lt;/a&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 09 Jan 2011 20:25:59 +0100</pubDate>
      <a10:rights type="text">ppedv Team Blog</a10:rights>
      <a10:contributor>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ppedv Team Blog</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.thomasbandt.de/39/2376/de/blog/html-zuverlaessig-mit-dem-html-agility-pack-parsen.html</guid>
      <link>http://blog.thomasbandt.de/39/2376/de/blog/html-zuverlaessig-mit-dem-html-agility-pack-parsen.html</link>
      <a10:author>
        <a10:name>Thomas Bandt</a10:name>
      </a10:author>
      <title>HTML zuverlässig mit dem Html Agility Pack parsen</title>
      <description>



    	

        
&lt;div id="4_Show_Content" class="BlogPostContainer"&gt;
	

    
    
    &lt;p&gt;Ein immer wiederkehrendes Szenario bei Webapplikationen ist naturgemäß das Posten von Text(-Nachrichten) über Formulare und das Ausgeben dieser Texte, sei es in Foren, auf Profilseiten oder was auch immer. Da der Mensch bequem ist, setzt man ihm für seine Formatierungen einen WYSIWYG-Editor vor die Nase (z.B. &lt;a href="http://ckeditor.com/" target="_blank"&gt;CKEditor&lt;/a&gt;, sehr zu empfehlen), über den er ganz bequem seine Formatierungen für seinen Text vornehmen kann. &lt;/p&gt;
&lt;p&gt;Sofern das alles im Kontext einer geschlussenen Umgebung passiert, also z.B. im Backend eines Content Management Systems, ist das auch völlig unproblematisch. Kritisch wird es immer dort, wo nicht ganz klar ist, wer denn den Text verfasst und vor allem wenn dieser öffentlich, also für Dritte sichtbar, ausgegeben wird. Warum ist das kritisch? Weil dies ein riesiges Einfallstor für so genanntes&amp;nbsp;&lt;a href="http://de.wikipedia.org/wiki/Cross-Site_Scripting" target="_blank"&gt;Cross-Site Scripting&lt;/a&gt; ist. &lt;/p&gt;
&lt;p&gt;Besonders sensibilisiert bin ich dafür, seit mich vor zwei Jahren ein Kunde bat, mal seine neue Website unter die Lupe zu nehmen. Ich brauchte gar nicht viel meiner ohnehin nicht vorhandenen kriminellen Energie oder besondere Erfahrung, mir reichte dieses&amp;nbsp;&lt;a href="http://ha.ckers.org/xss.html" target="_blank"&gt;Cheat Sheet&lt;/a&gt; um die (pakistanischen) Entwickler der Website zur Verzweiflung zu treiben.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Im Web gilt seit jeher: All Input Is Evil.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In meinem aktuellen Projekt war ich ein wenig am Überlegen, wie weit ich das Ganze wirklich absichern muss - denn die geschriebenen Texte werden nicht öffentlich im Web sondern nur nach vorherigem Login einem bekannten Nutzerkreis bereitgestellt. Aber dennoch - es sollen ja schon Pferder vor Apotheken gekotzt haben ...&lt;/p&gt;
&lt;p&gt;Mein erster Gedanke galt &lt;a href="http://de.wikipedia.org/wiki/BBCode"&gt;BBCode&lt;/a&gt;, für welches auch ein&amp;nbsp;&lt;a href="http://text.md/ckeditor-bbcode-plugin/"&gt;Plugin für den CKEditor&lt;/a&gt; gibt, das sich leicht erweitern lässt. Aber wenn man mal ein wenig rumsucht, dann findet man auch hier recht große&amp;nbsp;&lt;a href="http://jeffchannell.com/Other/bbcode-xss-howto.html" target="_blank"&gt;Angriffsflächen&lt;/a&gt; - da lohnt in meinen Augen der ganze Aufwand nicht.&lt;/p&gt;
&lt;p&gt;Meine Entscheidung fiel also auf die folgende Kombination:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;CKEditor mit sehr limitierten Formatierungsoptionen und ohne Einbindung von Bildern.
    &lt;li&gt;Parsing aller Tags und Attribute (!) und Test gegen eine &lt;a href="http://de.wikipedia.org/wiki/Wei%C3%9Fe_Liste" target="_blank"&gt;Whitelist&lt;/a&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Damit das funktioniert braucht es einen richtigen HTML-Parser, der den übergebenen Text in die einzelnen Objekte zerlegt - mit Regular Expressions läuft man hier gegen eine Wand. Ich habe mich für das&amp;nbsp;&lt;a href="http://htmlagilitypack.codeplex.com/"&gt;Html Agility Pack&lt;/a&gt; entschieden, was recht ausgereift ist und ein passables API bietet.&lt;/p&gt;
&lt;p&gt;Der Code ist recht einfach:&lt;/p&gt;
&lt;!-- code formatted by http://manoli.net/csharpformat/ --&gt;
&lt;div class="csharpcode"&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   1:  &lt;/span&gt;[HttpPost]&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   2:  &lt;/span&gt;&lt;span class="kwrd"&gt;public&lt;/span&gt; ActionResult Index(HtmlModel model)&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   3:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   4:  &lt;/span&gt;    model.Html = ParseHtml(model.Html);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   5:  &lt;/span&gt;    &lt;span class="kwrd"&gt;return&lt;/span&gt; View(model);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   6:  &lt;/span&gt;}&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   7:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;   8:  &lt;/span&gt;&lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; ParseHtml(&lt;span class="kwrd"&gt;string&lt;/span&gt; html)&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;   9:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  11:  &lt;/span&gt;    var doc = &lt;span class="kwrd"&gt;new&lt;/span&gt; HtmlDocument();&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  12:  &lt;/span&gt;    doc.OptionAutoCloseOnEnd = &lt;span class="kwrd"&gt;true&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  13:  &lt;/span&gt;    doc.LoadHtml(html);&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  14:  &lt;/span&gt;            &lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  15:  &lt;/span&gt;    var nodeWhiteList = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; { &lt;span class="str"&gt;"#text"&lt;/span&gt;, &lt;span class="str"&gt;"#document"&lt;/span&gt;, &lt;span class="str"&gt;"a"&lt;/span&gt;, &lt;span class="str"&gt;"br"&lt;/span&gt;, &lt;span class="str"&gt;"ul"&lt;/span&gt;, &lt;span class="str"&gt;"li"&lt;/span&gt; };&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  16:  &lt;/span&gt;    var attributeWhiteList = &lt;span class="kwrd"&gt;new&lt;/span&gt; List&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; { &lt;span class="str"&gt;"href"&lt;/span&gt; };&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  17:  &lt;/span&gt;            &lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  18:  &lt;/span&gt;    RemoveElementsNotInWhiteLists(doc.DocumentNode, nodeWhiteList, attributeWhiteList);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  19:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  20:  &lt;/span&gt;    &lt;span class="kwrd"&gt;return&lt;/span&gt; doc.DocumentNode.WriteTo().Replace(&lt;span class="str"&gt;"&amp;lt;br&amp;gt;"&lt;/span&gt;, &lt;span class="str"&gt;"&amp;lt;br /&amp;gt;"&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  21:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  22:  &lt;/span&gt;}&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  23:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  24:  &lt;/span&gt;&lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;static&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; RemoveElementsNotInWhiteLists(HtmlNode node, &lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  25:  &lt;/span&gt;    IEnumerable&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; nodeWhiteList, IEnumerable&amp;lt;&lt;span class="kwrd"&gt;string&lt;/span&gt;&amp;gt; attributeWhiteList)&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  26:  &lt;/span&gt;{&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  27:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  28:  &lt;/span&gt;    &lt;span class="kwrd"&gt;if&lt;/span&gt; (!nodeWhiteList.Contains(node.Name) || node.Attributes.Any(a =&amp;gt; a.Value.ToLower().Contains(&lt;span class="str"&gt;"javascript"&lt;/span&gt;)))&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  29:  &lt;/span&gt;    {&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  30:  &lt;/span&gt;        node.Remove();&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  31:  &lt;/span&gt;        &lt;span class="kwrd"&gt;return&lt;/span&gt;;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  32:  &lt;/span&gt;    }&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  33:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  34:  &lt;/span&gt;    node.Attributes&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  35:  &lt;/span&gt;            .Where(attribute =&amp;gt; !attributeWhiteList.Contains(attribute.Name))&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  36:  &lt;/span&gt;            .ToList()&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  37:  &lt;/span&gt;            .ForEach(attribute =&amp;gt; attribute.Remove());&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  38:  &lt;/span&gt;            &lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  39:  &lt;/span&gt;    node.ChildNodes&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  40:  &lt;/span&gt;            .ToList()&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  41:  &lt;/span&gt;            .ForEach(childNode =&amp;gt; RemoveElementsNotInWhiteLists(childNode, nodeWhiteList, attributeWhiteList));&lt;/pre&gt;
&lt;pre&gt;&lt;span class="lnum"&gt;  42:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class="alt"&gt;&lt;span class="lnum"&gt;  43:  &lt;/span&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Wie man sieht: die meiste Arbeit wird bereits von der Komponente erledigt und gekapselt, so dass man sich auf die eigentliche Aufgabe konzentrieren kann.&lt;/p&gt;
&lt;p&gt;Zunächst werden die erlaubten Tags und Attribute definiert und anschließend für alle Nodes die Methode RemoveElementsNotInWhiteLists() aufgerufen, in welcher dann die unerlaubten Attribute bzw. Tags entfernt werden.&lt;/p&gt;
&lt;p&gt;Zwei Ausnahmen sind noch drin: ein javascript-Aufruf in einem Attribut (vornehmlich in href-Attributen) kann in meinem Fall nicht vorkommen, falls es also dennoch reingeschrieben wurde, dann wird gleich das komplette Tag entfernt. Und leider werden bei der Ausgabe Tags wie &amp;lt;img /&amp;gt; und &amp;lt;br /&amp;gt; nicht richtig geschlossen, sofern man kein komplettes HTML-Dokument verarbeitet. Daher am Ende pragmatisch noch die Ersetzung von &amp;lt;br&amp;gt; zu &amp;lt;br /&amp;gt; ...&lt;/p&gt;
&lt;p&gt;Das Ergebnis kann sich sehen lassen:&lt;/p&gt;
&lt;img style="border-bottom: black 1px solid; border-left: black 1px solid; border-top: black 1px solid; border-right: black 1px solid" alt="" src="http://blog.thomasbandt.de/Library/Media/CMS/htmlparser.PNG" /&gt;
&lt;p&gt;Den Code habe ich als ausführbares MVC3-Projekt angehangen.&lt;/p&gt;


    
            &lt;h2&gt;Downloads&lt;/h2&gt;
            &lt;ul&gt;
        
           &lt;li&gt;
                &lt;a id="4_ListDownloads_ctl01_LinkDownload" href="http://blog.thomasbandt.de/Download.ashx?File=bbff77a5-9823-4259-b4ad-5c50c6c5dbe0"&gt;HtmlParser.zip&lt;/a&gt; (562,59 KB)
                
            &lt;/li&gt;
        
            &lt;/ul&gt;
        
    
    


&lt;/div&gt;






&lt;hr /&gt;
&lt;a href="http://dotnet-kicks.de/kick/?url=http://blog.thomasbandt.de/39/2376/de/blog/html-zuverlaessig-mit-dem-html-agility-pack-parsen.html&amp;title=HTML+zuverl%c3%a4ssig+mit+dem+Html+Agility+Pack+parsen"&gt;&lt;img src="http://dotnet-kicks.de/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2fblog.thomasbandt.de%2f39%2f2376%2fde%2fblog%2fhtml-zuverlaessig-mit-dem-html-agility-pack-parsen.html" border="0" alt="kick it on dotnet-kicks.de" style="vertical-align:middle" /&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href="http://blog.thomasbandt.de/39/2376/de/blog/html-zuverlaessig-mit-dem-html-agility-pack-parsen.html#Comments"&gt;&lt;img src="http://blog.thomasbandt.de/CommentCounter.ashx?ArticleID=6d3bcfdf-ee24-4d70-86a0-80241af9ce55" style="border:solid 0px black" /&gt;&lt;/a&gt; | &lt;a href="http://blog.thomasbandt.de/39/2376/de/blog/html-zuverlaessig-mit-dem-html-agility-pack-parsen.html#AddComment"&gt;Kommentieren&lt;/a&gt; | &amp;copy; 2011 &lt;a href="http://blog.thomasbandt.de/"&gt;Thomas Bandt&lt;/a&gt;
</description>
      <pubDate>Sun, 09 Jan 2011 16:34:00 +0100</pubDate>
      <a10:rights type="text">Thomas Bandt</a10:rights>
      <a10:contributor>
        <a10:name>Thomas Bandt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Bandt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="true">http://blog.it5000.de/PermaLink,guid,8f8af267-ce44-4feb-bbe6-3b4c00fa71e7.aspx</guid>
      <link>http://blog.it5000.de/PermaLink,guid,8f8af267-ce44-4feb-bbe6-3b4c00fa71e7.aspx</link>
      <a10:author>
        <a10:name>Florian Schmidt</a10:name>
      </a10:author>
      <title>.NET für Android und iPhone (MonoTouch und MonoDroid)</title>
      <description>&lt;img border="0" src="http://blog.it5000.de/content/binary/MonDroid.png"&gt; 
&lt;p&gt;
Die mobilen Betriebssysteme von Goole und Apple machen sich sehr gut auf dem Markt.
Auch Windows Phone scheint sich nicht schlecht zu verkaufen. Im Gegensatz zu Windows
Phone, was eine hervorragende Entwicklungsumgebung vorweisen kann, die in das Visual
Studio nahtlos integriert ist, siet es da mit der Programmierung für Android und iPhone
schlechter aus. 
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;iPhone Standard Entwicklung&lt;/b&gt; 
&lt;/p&gt;
&lt;p&gt;
Bei Apple existiert zwar eine recht gut zu bedienende Entwicklungsumgebung. Eine Integration
in die Standardentwicklungsumgebungen Eclipse oder Visual Studio ist jedoch nicht
möglich und somit bieten sich viele Optionen der Quellcodeverwaltung oder Architektur
nicht an. 
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Android Standard Entwicklung&lt;/b&gt; 
&lt;/p&gt;
&lt;p&gt;
Bei der normalen Entwicklung für das Android System ist einiges an Vorarbeiten zu
installieren, um überhaupt man anfangen zu können. Das schreckt schon viele Leute
ab. Mit viel ausprobieren bekommt man dann eine Entwicklungsumgebung installiert.
Diese wird mit viel Aufwand dann in das Eclipse integriert und läuft meiner Meinung
nach nicht rund. Nach einigem Aufwand und eine funktionierenden „Hello World“ war
der Spaß dahin. Es gibt keinen UI Editor und so weiter… 
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Weiteres Problem&lt;/b&gt; 
&lt;/p&gt;
&lt;p&gt;
Wenn ich jetzt Android mit Eclipse entwickle, iPhone mit dem Apple-Tool und Windows
Phone mit dem Visual Studio, dann habe ich das Problem, dass ich alle Anwendungen
3x schreiben muss und viel schlimmer noch 3 Umgebungen kennen muss um eine Anwendung
auf allen Plattformen verfügbar zu machen. Dies ist nicht Zeitgemäß… 
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Alternative&lt;/b&gt; 
&lt;/p&gt;
&lt;p&gt;
Seit letzter Woche gibt es endlich eine Mono Umsetzung für das Android Systeme. Dieses
System ist noch im BETA-Stadium – schaut aber schon mal ganz gut aus. Es steckt mit
Novell auch ein etwas größerer Hersteller dahinter. Diese Software wird dann jedoch
kommerziell lizenziert und es ist eine Schwesterversion für das iPhone verfügbar.
Die Preise liegen bei rund 350€ inklusive einem Jahr Subscription. Mit dieser Version
ist eine Bereitstellung im Market erlaubt. Eine Version zur Entwicklung von innerbetrieblichen
Anwendungen kostet etwas mehr. 
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Einheitliche Entwicklung&lt;/b&gt; 
&lt;/p&gt;
&lt;p&gt;
Novell hat verstanden, dass eine einheitliche Entwicklung für alle Plattformen mit
.NET eine Marktlüche ist. Wenn das Produkt jetzt fertig ist, kann man mit dem Visual
Studio für Windows, Web, Windows Phone, Android und iPhone Anwendungen entwickeln.
Damit würde man den Aufwand massiv reduzieren und vor allem die Einstiegshürde für
die mobile Entwicklung senken. Daher ist ein Blick auf das neue Mono-Framework absolut
interessant finde ich: 
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://monodroid.net/"&gt;Monodroid.net&lt;/a&gt; 
&lt;/p&gt;
&lt;img width="0" height="0" src="http://blog.it5000.de/aggbug.ashx?id=8f8af267-ce44-4feb-bbe6-3b4c00fa71e7" /&gt;</description>
      <pubDate>Sun, 09 Jan 2011 13:38:36 Z</pubDate>
      <a10:rights type="text">Florian Schmidt</a10:rights>
      <a10:contributor>
        <a10:name>Florian Schmidt</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Schmidt</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.ppedv.de/post.aspx?id=04efa0ba-62cf-4b25-9b5d-54d3752cf8d3</guid>
      <link>http://blog.ppedv.de/post/2011/01/08/Drucken-mit-Silverlight-V1.aspx</link>
      <a10:author>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:author>
      <title>Drucken mit Silverlight V1</title>
      <description>&lt;p&gt;Aus meiner letzten &lt;a href="http://www.ppedv.de/schulung/kurse/silverlight.aspx"&gt;Inhouse Silverlight Schulung&lt;/a&gt; kam gerade eine Frage per Mail rein. Wie ging das doch grad mit Drucken noch mal? Drucken sollte ja in Zeiten von papierlosen Büro… &lt;/p&gt;  &lt;p&gt;Also dann mal kurz zur Einleitung. Für mein Beispiel hole ich Daten aus einem Ria Service. Tabelle ist wie immer Customers aus der Northwind. Angezeigt wird in einem Datagrid. Normalerweise reichen drei Zeilen Code aus, um aus Silverlight mit RIA Services zu sprechen. Ich habe das Beispiel etwas umfangreicher gestaltet, um das Callback Event zu bekommen und auch die Möglichkeit zu haben LINQ Querys abzusenden. So kann man die Daten später auch filtern, sortieren oder pagen.&lt;/p&gt;  &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; Button1_Click(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; System.&lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; System.Windows.RoutedEventArgs) &lt;br /&gt;&lt;span class="kwrd"&gt;Handles&lt;/span&gt; Button1.Click
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; qry = From c &lt;span class="kwrd"&gt;In&lt;/span&gt; svc.GetCustomersQuery()
          &lt;span class="kwrd"&gt;Select&lt;/span&gt; c
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; lo &lt;span class="kwrd"&gt;As&lt;/span&gt; LoadOperation = svc.Load(qry)
        &lt;span class="kwrd"&gt;AddHandler&lt;/span&gt; lo.Completed, &lt;span class="kwrd"&gt;AddressOf&lt;/span&gt; loadOp_Completed
 &lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;

&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; loadOp_Completed(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; EventArgs)
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; lo = &lt;span class="kwrd"&gt;CType&lt;/span&gt;(sender, LoadOperation(Of Customers))
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; l &lt;span class="kwrd"&gt;As&lt;/span&gt; List(Of Customers)
        l = lo.Entities.ToList()
        DataGrid1.ItemsSource = l
 &lt;span class="kwrd"&gt;End&lt;/span&gt; Sub&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Das Drucken selbst ist sehr einfach. Der Benutzer kann auch direkt aus dem Browser, also ohne OOB, drucken.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; Button2_Click(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; System.&lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; System.Windows.RoutedEventArgs)&lt;br /&gt; &lt;span class="kwrd"&gt;Handles&lt;/span&gt; Button2.Click
        &lt;span class="kwrd"&gt;Dim&lt;/span&gt; doc &lt;span class="kwrd"&gt;As&lt;/span&gt; PrintDocument = &lt;span class="kwrd"&gt;New&lt;/span&gt; PrintDocument()
        &lt;span class="kwrd"&gt;AddHandler&lt;/span&gt; doc.PrintPage, &lt;span class="kwrd"&gt;AddressOf&lt;/span&gt; doc_PrintPage
        doc.Print(&lt;span class="str"&gt;&amp;quot;KundenListe&amp;quot;&lt;/span&gt;)
&lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;
&lt;span class="kwrd"&gt;Private&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt; doc_PrintPage(&lt;span class="kwrd"&gt;ByVal&lt;/span&gt; sender &lt;span class="kwrd"&gt;As&lt;/span&gt; &lt;span class="kwrd"&gt;Object&lt;/span&gt;, &lt;span class="kwrd"&gt;ByVal&lt;/span&gt; e &lt;span class="kwrd"&gt;As&lt;/span&gt; PrintPageEventArgs)
        e.PageVisual = DataGrid1
&lt;span class="kwrd"&gt;End&lt;/span&gt; &lt;span class="kwrd"&gt;Sub&lt;/span&gt;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Es kommt der übliche Druckerdialog des Betriebssystems und das Ergebnis ist ganz genau der gedruckte Dialog.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_22.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_22.png" width="244" height="130" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Im nächsten Blog Post werde ich das Beispiel auf mehrseitigen Druck ergänzen und das ganze etwas schöner formatieren.&lt;/p&gt;</description>
      <pubDate>Sat, 08 Jan 2011 17:52:08 +0100</pubDate>
      <a10:rights type="text">ppedv Team Blog</a10:rights>
      <a10:contributor>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ppedv Team Blog</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.ppedv.de/post.aspx?id=3eebde90-4557-4e66-836a-59847ceb6cc5</guid>
      <link>http://blog.ppedv.de/post/2011/01/08/UTF8-und-efbfbdefbfbdefbfbd-efbfbdefbfbdefbfbdefbfbdefbfbd.aspx</link>
      <a10:author>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:author>
      <title>UTF8 und ��� ???�����</title>
      <description>&lt;p&gt;Kommt Ihnen obiger Text bekannt vor? Manchmal gibt es Websites, Browser und Editoren in denen die verflixte codierung von Umlauten falsch angezeigt wird. Das verwenden der &amp;amp;uml; Syntax ist eigentlich obsolet. UTF-8 hat genug Platz um auch die abgefahrensten Zeichen codieren zu können.&lt;/p&gt;  &lt;p&gt;Doch beginnen wir einmal von vorne. Eine UTF-8 Datei kann aber muss nicht mit einer vorgestellten byte-order-mark (BOM) markiert sein. Visual Studio 2010 kann dies über Optionen beim speichern realisieren. &lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_14.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_14.png" width="244" height="148" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_15.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_15.png" width="244" height="57" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_16.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_16.png" width="244" height="96" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Wenn man das erkannt hat, ist es natürlich leicht die Datei mit BOM zu speichern. Aber erstens gibt es Empfehlungen&amp;#160; auf BOM zu verzichen und zweitens erkennen das manche Editoren nicht richtig. So sieht die Datei mit Notepad geöffnet richtig aus, weil ich ein deutsches OS verwende.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_17.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_17.png" width="244" height="188" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Im Browser siehts komischerweise am selben System ganz anders aus.&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_18.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_18.png" width="244" height="98" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Auch nicht schön und doch seiht man das täglich, weil die Einstellungen des Webservers Auswirkung haben können. Wenn un der Admin ein neues System aufsetzt kann die Website solcherart verunstaltet sein.&lt;/p&gt;  &lt;p&gt;Ein möglicher Workaround ist in der web.config einfach die Codierung einzustellen und so den IIS zu motivieren mitzuteilen welche codierung er verwendet.&lt;/p&gt;  &lt;p&gt;UTF-8 without siganute Codepage 65001 im Chrome Browser&lt;/p&gt;  &lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_19.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_19.png" width="244" height="79" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Die gleiche ASPX Seite mit folgender Änderung in Web.config. Wesentlich ist das FileEncoding Attribut.&lt;/p&gt;  &lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;globalization fileEncoding=&amp;quot;utf-8&amp;quot;
      requestEncoding=&amp;quot;utf-8&amp;quot; responseEncoding=&amp;quot;utf-8&amp;quot;
      culture=&amp;quot;auto&amp;quot; uiCulture=&amp;quot;auto&amp;quot;&lt;/pre&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_20.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_20.png" width="244" height="77" /&gt;&lt;/a&gt;&lt;/p&gt;













&lt;p&gt;Alternativ gibt es auch die Möglichkeit per Metatag dem Browser mitzuteilen welches Encoding vorliegt.&lt;/p&gt;

&lt;pre class="csharpcode"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;meta&lt;/span&gt; &lt;span class="attr"&gt;http-equiv&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;content-type&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;text/html;charset=iso-8859-1&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;Auch das funktioniert. Wenn ein Benutzer mit einem anderen Editor die Seiten aufruft, ist allerdings der Ärger vorprogrammiert. Daher auch die Motivation für den Artikel. Manche von unseren Marketing Mitarbeitern editieren die Websites mit Expression Web 4.&lt;/p&gt;

&lt;p&gt;Der beobachtet Effekt ist, das die Umlaute in der Seite durch seltsame Zeichen ersetzt werden und Expression Web die Größe der Website vervielfacht mit jedem öffnen und speichern Vorgang, Man findet zu diesem Problem unzählige Postings im Web. Nun halte ich das durchaus für einen Fehler, den man allerdings elegant umgehen kann. Nur um das festzuhalten. Der Fehler tritt auf, wenn die HTML oder ASPX Datei ohne BOM angelegt wurde. Expressen Web erzeugt die BOM entsprechend seiner Einstellungen in den Page Editor Optionen mit Signatur, den HTML Entitäten für die Umlaute und dem Meta Tag. Sozusagen dreifach gesichert. Das Problem entsteht wenn man per Datei oder FTP Zugriff eine UFT-8 codierte Datei ohne&amp;#160; mit einem englischen Expression Blend&amp;#160; öffnet. Expression Web ändert die Codierung nicht und erzeugt kein BOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blog.ppedv.de/image.axd?picture=image_21.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://blog.ppedv.de/image.axd?picture=image_thumb_21.png" width="244" height="103" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Die gleiche Datei mit Visual Studio 2010 geöffnet wird so angezeigt wie erwartet, also korrekt. Der Meta Tag Content-type verhindert diesen Effekt. Entsprechend mein Tipp immer den Metatag (eventuell in Master Page) einbauen wenn mit Visual Studio und Expression Web gemischt an der Web Präsenz gearbeitet wird.&lt;/p&gt;

&lt;p&gt;Ganz böse geht das ganze aus, wenn sich die Encodings wiedersprechen (Meta, Web.config und BOM) und man diese Dateien in verschiedenen Editoren öffnet. Dann ist die Datei auch schon mal korrupt und muss vom Backup zurück gespielt werden.&lt;/p&gt;</description>
      <pubDate>Sat, 08 Jan 2011 13:22:05 +0100</pubDate>
      <a10:rights type="text">ppedv Team Blog</a10:rights>
      <a10:contributor>
        <a10:name>ppedv Team Blog</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ppedv Team Blog</dc:creator>
    </item>
    <item>
      <guid isPermaLink="false">http://blog.lars-keller.net/post/2011/01/08/170111-Treffen-der-DNUG-Braunschweig-e28093-SOLIDNET.aspx</guid>
      <a10:author>
        <a10:name>Lars Keller</a10:name>
      </a10:author>
      <title>17.01.11 Treffen der DNUG Braunschweig – SOLID.NET</title>
      <description>&lt;p&gt;Die DNUG Braunschweig trifft sich am 17.01.2011 um 19:00 im Restaurant Zucker (Tagungsraum). Uns kommt Alexander Gro&amp;szlig; aus der DNUG Leipzig mit dem &amp;ldquo;SOLID.NET&amp;rdquo; besuchen.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.therightstuff.de/"&gt;Alexander Gro&amp;szlig;&lt;/a&gt; stellt sein aktuelles Projekt vor und l&amp;auml;dt dabei zur Diskussion der Softwaredesignentscheidungen ein. Im Projekt kommen viele Open Source-Frameworks zum Einsatz auf die ganz nach Wunsch des Publikums n&amp;auml;her eingegangen wird: AutoMapper, Machine.Specifications, NServiceBus, Castle Windsor, NHibernate, Spark View Engine, Rhino Mocks, Rake, MSDeploy usw.    &lt;br /&gt;Weitere Informationen zu SOLID.NET findet ihr: &lt;a href="http://tinyurl.com/277j9kj"&gt;http://tinyurl.com/277j9kj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Wie immer ist dieses Event kostenlos und jeder .NET Interessierte ist herzlich willkommen!&lt;/p&gt;
&lt;p&gt;Weitere Informationen zur DNUG Braunschweig findest du &lt;a href="http://www.dotnet-braunschweig.de/"&gt;hier&lt;/a&gt;.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?a=zN1kaNXES4U:K5WAThUuTHY:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?a=zN1kaNXES4U:K5WAThUuTHY:7Q72WNTAKBA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?d=7Q72WNTAKBA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?a=zN1kaNXES4U:K5WAThUuTHY:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?i=zN1kaNXES4U:K5WAThUuTHY:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?a=zN1kaNXES4U:K5WAThUuTHY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?a=zN1kaNXES4U:K5WAThUuTHY:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/LarsKellerinspiredBynet?i=zN1kaNXES4U:K5WAThUuTHY:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/LarsKellerinspiredBynet/~4/zN1kaNXES4U" height="1" width="1"/&gt;</description>
      <pubDate>Sat, 08 Jan 2011 10:26:00 Z</pubDate>
      <a10:link rel="self" href="http://blog.lars-keller.net/post.aspx?id=2f47b9e2-a54a-49b8-bf12-74d89c03e55e" />
      <a10:link href="http://feedproxy.google.com/~r/LarsKellerinspiredBynet/~3/zN1kaNXES4U/170111-Treffen-der-DNUG-Braunschweig-e28093-SOLIDNET.aspx" />
      <a10:link rel="related" href="http://blog.lars-keller.net/post/2011/01/08/170111-Treffen-der-DNUG-Braunschweig-e28093-SOLIDNET.aspx#comment" />
      <a10:updated>2011-01-08T10:26:00Z</a10:updated>
      <a10:rights type="text">Lars Keller</a10:rights>
      <a10:contributor>
        <a10:name>Lars Keller</a10:name>
      </a10:contributor>
      <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lars Keller</dc:creator>
    </item>
  </channel>
</rss>